Terminals unused in grammar

   BLOCK_COMMENT
   LINE_COMMENT
   ESCAPE_CHARACTERS
   SPACE
   UNDEFINED


State 97 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: stmts

    2 stmts: stmt stmts
    3      | %empty

    4 stmt: expr SEMICOLON
    5     | ifstmt
    6     | whilestmt
    7     | forstmt
    8     | returnstmt

    9 $@1: %empty

   10 stmt: BREAK $@1 SEMICOLON

   11 $@2: %empty

   12 stmt: CONTINUE $@2 SEMICOLON
   13     | block
   14     | funcdef
   15     | SEMICOLON

   16 expr: assignexpr
   17     | expr PLUS expr
   18     | expr MINUS expr
   19     | expr MULTIPLY expr
   20     | expr DIV expr
   21     | expr MOD expr
   22     | expr BIGGER expr
   23     | expr BIGGER_EQ expr
   24     | expr LESS expr
   25     | expr LESS_EQ expr
   26     | expr EQUAL expr
   27     | expr DIFFER expr
   28     | expr AND Q expr
   29     | expr OR Q expr
   30     | term

   31 Q: %empty

   32 term: START_PARENTHESIS expr END_PARENTHESIS
   33     | primary
   34     | MINUS expr
   35     | PLUSPLUS lvalue

   36 $@3: %empty

   37 term: lvalue $@3 PLUSPLUS
   38     | MINUSMINUS lvalue

   39 $@4: %empty

   40 term: lvalue $@4 MINUSMINUS
   41     | NOT expr

   42 primary: lvalue
   43        | call
   44        | objectdef
   45        | START_PARENTHESIS funcdef END_PARENTHESIS
   46        | const

   47 lvalue: ID
   48       | LOCAL ID
   49       | DOUBLE_COLON ID
   50       | member

   51 $@5: %empty

   52 assignexpr: lvalue $@5 ASSIGN expr
   53           | call ASSIGN expr

   54 $@6: %empty

   55 member: lvalue DOT $@6 ID
   56       | lvalue START_BRACKET expr END_BRACKET

   57 $@7: %empty

   58 member: call DOT $@7 ID
   59       | call START_BRACKET expr END_BRACKET

   60 call: call START_PARENTHESIS elist END_PARENTHESIS

   61 $@8: %empty

   62 call: lvalue $@8 callsuffix
   63     | START_PARENTHESIS funcdef END_PARENTHESIS START_PARENTHESIS elist END_PARENTHESIS

   64 callsuffix: normcall
   65           | methodcall

   66 normcall: START_PARENTHESIS elist END_PARENTHESIS

   67 methodcall: DOUBLE_DOT ID START_PARENTHESIS elist END_PARENTHESIS

   68 elist: expr commaexpr
   69      | %empty

   70 commaexpr: COMMA expr commaexpr
   71          | %empty

   72 objectdef: START_BRACKET elist END_BRACKET
   73          | START_BRACKET indexed END_BRACKET

   74 indexed: indexedelem commaindexedelem

   75 commaindexedelem: COMMA indexedelem commaindexedelem
   76                 | %empty

   77 indexedelem: CURLY_START_BRACKET expr COLON expr CURLY_END_BRACKET

   78 $@9: %empty

   79 block: CURLY_START_BRACKET $@9 CURLY_END_BRACKET

   80 $@10: %empty

   81 block: CURLY_START_BRACKET $@10 stmt program CURLY_END_BRACKET

   82 $@11: %empty

   83 $@12: %empty

   84 $@13: %empty

   85 funcdef: FUNCTION $@11 START_PARENTHESIS $@12 idlist END_PARENTHESIS $@13 block

   86 $@14: %empty

   87 $@15: %empty

   88 $@16: %empty

   89 $@17: %empty

   90 funcdef: FUNCTION $@14 ID $@15 START_PARENTHESIS $@16 idlist END_PARENTHESIS $@17 block

   91 const: REAL
   92      | INTEGER
   93      | STRING
   94      | NIL
   95      | TRUE
   96      | FALSE

   97 $@18: %empty

   98 idlist: ID $@18 commaid
   99       | %empty

  100 $@19: %empty

  101 commaid: COMMA ID $@19 commaid
  102        | %empty

  103 ifprefix: IF START_PARENTHESIS expr END_PARENTHESIS

  104 ifstmt: ifprefix stmt
  105       | ifprefix stmt elseprefix stmt

  106 elseprefix: ELSE

  107 whilestart: WHILE

  108 whilecond: START_PARENTHESIS expr END_PARENTHESIS

  109 whilestmt: whilestart whilecond stmt

  110 N: %empty

  111 M: %empty

  112 $@20: %empty

  113 forprefix: FOR $@20 START_PARENTHESIS elist SEMICOLON M expr SEMICOLON

  114 forstmt: forprefix N elist END_PARENTHESIS N stmt N

  115 $@21: %empty

  116 returnstmt: RETURN $@21 expr SEMICOLON

  117 $@22: %empty

  118 returnstmt: RETURN $@22 SEMICOLON


Terminals, with rules where they appear

$end (0) 0
error (256)
ASSIGN (258) 52 53
STRING (259) 93
INTEGER (260) 92
REAL (261) 91
LOCAL (262) 48
NIL (263) 94
ID (264) 47 48 49 55 58 67 90 98 101
BLOCK_COMMENT (265)
LINE_COMMENT (266)
ESCAPE_CHARACTERS (267)
SPACE (268)
IF (269) 103
ELSE (270) 106
WHILE (271) 107
FOR (272) 113
FUNCTION (273) 85 90
RETURN (274) 116 118
BREAK (275) 10
CONTINUE (276) 12
AND (277) 28
NOT (278) 41
OR (279) 29
TRUE (280) 95
FALSE (281) 96
MINUS (282) 18 34
EQUAL (283) 26
DIFFER (284) 27
BIGGER (285) 22
LESS (286) 24
BIGGER_EQ (287) 23
LESS_EQ (288) 25
MINUSMINUS (289) 38 40
PLUSPLUS (290) 35 37
MOD (291) 21
MULTIPLY (292) 19
DIV (293) 20
PLUS (294) 17
CURLY_START_BRACKET (295) 77 79 81
CURLY_END_BRACKET (296) 77 79 81
START_BRACKET (297) 56 59 72 73
END_BRACKET (298) 56 59 72 73
START_PARENTHESIS (299) 32 45 60 63 66 67 85 90 103 108 113
END_PARENTHESIS (300) 32 45 60 63 66 67 85 90 103 108 114
SEMICOLON (301) 4 10 12 15 113 116 118
COMMA (302) 70 75 101
COLON (303) 77
DOUBLE_COLON (304) 49
DOT (305) 55 58
DOUBLE_DOT (306) 67
UNDEFINED (307)
UMINUS (308)


Nonterminals, with rules where they appear

$accept (54)
    on left: 0
program (55)
    on left: 1, on right: 0 81
stmts (56)
    on left: 2 3, on right: 1 2
stmt (57)
    on left: 4 5 6 7 8 10 12 13 14 15, on right: 2 81 104 105 109 114
$@1 (58)
    on left: 9, on right: 10
$@2 (59)
    on left: 11, on right: 12
expr (60)
    on left: 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30, on right:
    4 17 18 19 20 21 22 23 24 25 26 27 28 29 32 34 41 52 53 56 59 68
    70 77 103 108 113 116
Q (61)
    on left: 31, on right: 28 29
term (62)
    on left: 32 33 34 35 37 38 40 41, on right: 30
$@3 (63)
    on left: 36, on right: 37
$@4 (64)
    on left: 39, on right: 40
primary (65)
    on left: 42 43 44 45 46, on right: 33
lvalue (66)
    on left: 47 48 49 50, on right: 35 37 38 40 42 52 55 56 62
assignexpr (67)
    on left: 52 53, on right: 16
$@5 (68)
    on left: 51, on right: 52
member (69)
    on left: 55 56 58 59, on right: 50
$@6 (70)
    on left: 54, on right: 55
$@7 (71)
    on left: 57, on right: 58
call (72)
    on left: 60 62 63, on right: 43 53 58 59 60
$@8 (73)
    on left: 61, on right: 62
callsuffix (74)
    on left: 64 65, on right: 62
normcall (75)
    on left: 66, on right: 64
methodcall (76)
    on left: 67, on right: 65
elist (77)
    on left: 68 69, on right: 60 63 66 67 72 113 114
commaexpr (78)
    on left: 70 71, on right: 68 70
objectdef (79)
    on left: 72 73, on right: 44
indexed (80)
    on left: 74, on right: 73
commaindexedelem (81)
    on left: 75 76, on right: 74 75
indexedelem (82)
    on left: 77, on right: 74 75
block (83)
    on left: 79 81, on right: 13 85 90
$@9 (84)
    on left: 78, on right: 79
$@10 (85)
    on left: 80, on right: 81
funcdef (86)
    on left: 85 90, on right: 14 45 63
$@11 (87)
    on left: 82, on right: 85
$@12 (88)
    on left: 83, on right: 85
$@13 (89)
    on left: 84, on right: 85
$@14 (90)
    on left: 86, on right: 90
$@15 (91)
    on left: 87, on right: 90
$@16 (92)
    on left: 88, on right: 90
$@17 (93)
    on left: 89, on right: 90
const (94)
    on left: 91 92 93 94 95 96, on right: 46
idlist (95)
    on left: 98 99, on right: 85 90
$@18 (96)
    on left: 97, on right: 98
commaid (97)
    on left: 101 102, on right: 98 101
$@19 (98)
    on left: 100, on right: 101
ifprefix (99)
    on left: 103, on right: 104 105
ifstmt (100)
    on left: 104 105, on right: 5
elseprefix (101)
    on left: 106, on right: 105
whilestart (102)
    on left: 107, on right: 109
whilecond (103)
    on left: 108, on right: 109
whilestmt (104)
    on left: 109, on right: 6
N (105)
    on left: 110, on right: 114
M (106)
    on left: 111, on right: 113
forprefix (107)
    on left: 113, on right: 114
$@20 (108)
    on left: 112, on right: 113
forstmt (109)
    on left: 114, on right: 7
returnstmt (110)
    on left: 116 118, on right: 8
$@21 (111)
    on left: 115, on right: 116
$@22 (112)
    on left: 117, on right: 118


State 0

    0 $accept: . program $end

    STRING               shift, and go to state 1
    INTEGER              shift, and go to state 2
    REAL                 shift, and go to state 3
    LOCAL                shift, and go to state 4
    NIL                  shift, and go to state 5
    ID                   shift, and go to state 6
    IF                   shift, and go to state 7
    WHILE                shift, and go to state 8
    FOR                  shift, and go to state 9
    FUNCTION             shift, and go to state 10
    RETURN               shift, and go to state 11
    BREAK                shift, and go to state 12
    CONTINUE             shift, and go to state 13
    NOT                  shift, and go to state 14
    TRUE                 shift, and go to state 15
    FALSE                shift, and go to state 16
    MINUS                shift, and go to state 17
    MINUSMINUS           shift, and go to state 18
    PLUSPLUS             shift, and go to state 19
    CURLY_START_BRACKET  shift, and go to state 20
    START_BRACKET        shift, and go to state 21
    START_PARENTHESIS    shift, and go to state 22
    SEMICOLON            shift, and go to state 23
    DOUBLE_COLON         shift, and go to state 24

    $default  reduce using rule 3 (stmts)

    program     go to state 25
    stmts       go to state 26
    stmt        go to state 27
    expr        go to state 28
    term        go to state 29
    primary     go to state 30
    lvalue      go to state 31
    assignexpr  go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    block       go to state 36
    funcdef     go to state 37
    const       go to state 38
    ifprefix    go to state 39
    ifstmt      go to state 40
    whilestart  go to state 41
    whilestmt   go to state 42
    forprefix   go to state 43
    forstmt     go to state 44
    returnstmt  go to state 45


State 1

   93 const: STRING .

    $default  reduce using rule 93 (const)


State 2

   92 const: INTEGER .

    $default  reduce using rule 92 (const)


State 3

   91 const: REAL .

    $default  reduce using rule 91 (const)


State 4

   48 lvalue: LOCAL . ID

    ID  shift, and go to state 46


State 5

   94 const: NIL .

    $default  reduce using rule 94 (const)


State 6

   47 lvalue: ID .

    $default  reduce using rule 47 (lvalue)


State 7

  103 ifprefix: IF . START_PARENTHESIS expr END_PARENTHESIS

    START_PARENTHESIS  shift, and go to state 47


State 8

  107 whilestart: WHILE .

    $default  reduce using rule 107 (whilestart)


State 9

  113 forprefix: FOR . $@20 START_PARENTHESIS elist SEMICOLON M expr SEMICOLON

    $default  reduce using rule 112 ($@20)

    $@20  go to state 48


State 10

   85 funcdef: FUNCTION . $@11 START_PARENTHESIS $@12 idlist END_PARENTHESIS $@13 block
   90        | FUNCTION . $@14 ID $@15 START_PARENTHESIS $@16 idlist END_PARENTHESIS $@17 block

    ID        reduce using rule 86 ($@14)
    $default  reduce using rule 82 ($@11)

    $@11  go to state 49
    $@14  go to state 50


State 11

  116 returnstmt: RETURN . $@21 expr SEMICOLON
  118           | RETURN . $@22 SEMICOLON

    SEMICOLON  reduce using rule 117 ($@22)
    $default   reduce using rule 115 ($@21)

    $@21  go to state 51
    $@22  go to state 52


State 12

   10 stmt: BREAK . $@1 SEMICOLON

    $default  reduce using rule 9 ($@1)

    $@1  go to state 53


State 13

   12 stmt: CONTINUE . $@2 SEMICOLON

    $default  reduce using rule 11 ($@2)

    $@2  go to state 54


State 14

   41 term: NOT . expr

    STRING             shift, and go to state 1
    INTEGER            shift, and go to state 2
    REAL               shift, and go to state 3
    LOCAL              shift, and go to state 4
    NIL                shift, and go to state 5
    ID                 shift, and go to state 6
    NOT                shift, and go to state 14
    TRUE               shift, and go to state 15
    FALSE              shift, and go to state 16
    MINUS              shift, and go to state 17
    MINUSMINUS         shift, and go to state 18
    PLUSPLUS           shift, and go to state 19
    START_BRACKET      shift, and go to state 21
    START_PARENTHESIS  shift, and go to state 22
    DOUBLE_COLON       shift, and go to state 24

    expr        go to state 55
    term        go to state 29
    primary     go to state 30
    lvalue      go to state 31
    assignexpr  go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 15

   95 const: TRUE .

    $default  reduce using rule 95 (const)


State 16

   96 const: FALSE .

    $default  reduce using rule 96 (const)


State 17

   34 term: MINUS . expr

    STRING             shift, and go to state 1
    INTEGER            shift, and go to state 2
    REAL               shift, and go to state 3
    LOCAL              shift, and go to state 4
    NIL                shift, and go to state 5
    ID                 shift, and go to state 6
    NOT                shift, and go to state 14
    TRUE               shift, and go to state 15
    FALSE              shift, and go to state 16
    MINUS              shift, and go to state 17
    MINUSMINUS         shift, and go to state 18
    PLUSPLUS           shift, and go to state 19
    START_BRACKET      shift, and go to state 21
    START_PARENTHESIS  shift, and go to state 22
    DOUBLE_COLON       shift, and go to state 24

    expr        go to state 56
    term        go to state 29
    primary     go to state 30
    lvalue      go to state 31
    assignexpr  go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 18

   38 term: MINUSMINUS . lvalue

    LOCAL              shift, and go to state 4
    ID                 shift, and go to state 6
    START_PARENTHESIS  shift, and go to state 57
    DOUBLE_COLON       shift, and go to state 24

    lvalue  go to state 58
    member  go to state 33
    call    go to state 59


State 19

   35 term: PLUSPLUS . lvalue

    LOCAL              shift, and go to state 4
    ID                 shift, and go to state 6
    START_PARENTHESIS  shift, and go to state 57
    DOUBLE_COLON       shift, and go to state 24

    lvalue  go to state 60
    member  go to state 33
    call    go to state 59


State 20

   79 block: CURLY_START_BRACKET . $@9 CURLY_END_BRACKET
   81      | CURLY_START_BRACKET . $@10 stmt program CURLY_END_BRACKET

    CURLY_END_BRACKET  reduce using rule 78 ($@9)
    $default           reduce using rule 80 ($@10)

    $@9   go to state 61
    $@10  go to state 62


State 21

   72 objectdef: START_BRACKET . elist END_BRACKET
   73          | START_BRACKET . indexed END_BRACKET

    STRING               shift, and go to state 1
    INTEGER              shift, and go to state 2
    REAL                 shift, and go to state 3
    LOCAL                shift, and go to state 4
    NIL                  shift, and go to state 5
    ID                   shift, and go to state 6
    NOT                  shift, and go to state 14
    TRUE                 shift, and go to state 15
    FALSE                shift, and go to state 16
    MINUS                shift, and go to state 17
    MINUSMINUS           shift, and go to state 18
    PLUSPLUS             shift, and go to state 19
    CURLY_START_BRACKET  shift, and go to state 63
    START_BRACKET        shift, and go to state 21
    START_PARENTHESIS    shift, and go to state 22
    DOUBLE_COLON         shift, and go to state 24

    $default  reduce using rule 69 (elist)

    expr         go to state 64
    term         go to state 29
    primary      go to state 30
    lvalue       go to state 31
    assignexpr   go to state 32
    member       go to state 33
    call         go to state 34
    elist        go to state 65
    objectdef    go to state 35
    indexed      go to state 66
    indexedelem  go to state 67
    const        go to state 38


State 22

   32 term: START_PARENTHESIS . expr END_PARENTHESIS
   45 primary: START_PARENTHESIS . funcdef END_PARENTHESIS
   63 call: START_PARENTHESIS . funcdef END_PARENTHESIS START_PARENTHESIS elist END_PARENTHESIS

    STRING             shift, and go to state 1
    INTEGER            shift, and go to state 2
    REAL               shift, and go to state 3
    LOCAL              shift, and go to state 4
    NIL                shift, and go to state 5
    ID                 shift, and go to state 6
    FUNCTION           shift, and go to state 10
    NOT                shift, and go to state 14
    TRUE               shift, and go to state 15
    FALSE              shift, and go to state 16
    MINUS              shift, and go to state 17
    MINUSMINUS         shift, and go to state 18
    PLUSPLUS           shift, and go to state 19
    START_BRACKET      shift, and go to state 21
    START_PARENTHESIS  shift, and go to state 22
    DOUBLE_COLON       shift, and go to state 24

    expr        go to state 68
    term        go to state 29
    primary     go to state 30
    lvalue      go to state 31
    assignexpr  go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    funcdef     go to state 69
    const       go to state 38


State 23

   15 stmt: SEMICOLON .

    $default  reduce using rule 15 (stmt)


State 24

   49 lvalue: DOUBLE_COLON . ID

    ID  shift, and go to state 70


State 25

    0 $accept: program . $end

    $end  shift, and go to state 71


State 26

    1 program: stmts .

    $default  reduce using rule 1 (program)


State 27

    2 stmts: stmt . stmts

    STRING               shift, and go to state 1
    INTEGER              shift, and go to state 2
    REAL                 shift, and go to state 3
    LOCAL                shift, and go to state 4
    NIL                  shift, and go to state 5
    ID                   shift, and go to state 6
    IF                   shift, and go to state 7
    WHILE                shift, and go to state 8
    FOR                  shift, and go to state 9
    FUNCTION             shift, and go to state 10
    RETURN               shift, and go to state 11
    BREAK                shift, and go to state 12
    CONTINUE             shift, and go to state 13
    NOT                  shift, and go to state 14
    TRUE                 shift, and go to state 15
    FALSE                shift, and go to state 16
    MINUS                shift, and go to state 17
    MINUSMINUS           shift, and go to state 18
    PLUSPLUS             shift, and go to state 19
    CURLY_START_BRACKET  shift, and go to state 20
    START_BRACKET        shift, and go to state 21
    START_PARENTHESIS    shift, and go to state 22
    SEMICOLON            shift, and go to state 23
    DOUBLE_COLON         shift, and go to state 24

    $default  reduce using rule 3 (stmts)

    stmts       go to state 72
    stmt        go to state 27
    expr        go to state 28
    term        go to state 29
    primary     go to state 30
    lvalue      go to state 31
    assignexpr  go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    block       go to state 36
    funcdef     go to state 37
    const       go to state 38
    ifprefix    go to state 39
    ifstmt      go to state 40
    whilestart  go to state 41
    whilestmt   go to state 42
    forprefix   go to state 43
    forstmt     go to state 44
    returnstmt  go to state 45


State 28

    4 stmt: expr . SEMICOLON
   17 expr: expr . PLUS expr
   18     | expr . MINUS expr
   19     | expr . MULTIPLY expr
   20     | expr . DIV expr
   21     | expr . MOD expr
   22     | expr . BIGGER expr
   23     | expr . BIGGER_EQ expr
   24     | expr . LESS expr
   25     | expr . LESS_EQ expr
   26     | expr . EQUAL expr
   27     | expr . DIFFER expr
   28     | expr . AND Q expr
   29     | expr . OR Q expr

    AND        shift, and go to state 73
    OR         shift, and go to state 74
    MINUS      shift, and go to state 75
    EQUAL      shift, and go to state 76
    DIFFER     shift, and go to state 77
    BIGGER     shift, and go to state 78
    LESS       shift, and go to state 79
    BIGGER_EQ  shift, and go to state 80
    LESS_EQ    shift, and go to state 81
    MOD        shift, and go to state 82
    MULTIPLY   shift, and go to state 83
    DIV        shift, and go to state 84
    PLUS       shift, and go to state 85
    SEMICOLON  shift, and go to state 86


State 29

   30 expr: term .

    $default  reduce using rule 30 (expr)


State 30

   33 term: primary .

    $default  reduce using rule 33 (term)


State 31

   37 term: lvalue . $@3 PLUSPLUS
   40     | lvalue . $@4 MINUSMINUS
   42 primary: lvalue .
   52 assignexpr: lvalue . $@5 ASSIGN expr
   55 member: lvalue . DOT $@6 ID
   56       | lvalue . START_BRACKET expr END_BRACKET
   62 call: lvalue . $@8 callsuffix

    START_BRACKET  shift, and go to state 87
    DOT            shift, and go to state 88

    ASSIGN             reduce using rule 51 ($@5)
    MINUSMINUS         reduce using rule 39 ($@4)
    PLUSPLUS           reduce using rule 36 ($@3)
    START_PARENTHESIS  reduce using rule 61 ($@8)
    DOUBLE_DOT         reduce using rule 61 ($@8)
    $default           reduce using rule 42 (primary)

    $@3  go to state 89
    $@4  go to state 90
    $@5  go to state 91
    $@8  go to state 92


State 32

   16 expr: assignexpr .

    $default  reduce using rule 16 (expr)


State 33

   50 lvalue: member .

    $default  reduce using rule 50 (lvalue)


State 34

   43 primary: call .
   53 assignexpr: call . ASSIGN expr
   58 member: call . DOT $@7 ID
   59       | call . START_BRACKET expr END_BRACKET
   60 call: call . START_PARENTHESIS elist END_PARENTHESIS

    ASSIGN             shift, and go to state 93
    START_BRACKET      shift, and go to state 94
    START_PARENTHESIS  shift, and go to state 95
    DOT                shift, and go to state 96

    $default  reduce using rule 43 (primary)


State 35

   44 primary: objectdef .

    $default  reduce using rule 44 (primary)


State 36

   13 stmt: block .

    $default  reduce using rule 13 (stmt)


State 37

   14 stmt: funcdef .

    $default  reduce using rule 14 (stmt)


State 38

   46 primary: const .

    $default  reduce using rule 46 (primary)


State 39

  104 ifstmt: ifprefix . stmt
  105       | ifprefix . stmt elseprefix stmt

    STRING               shift, and go to state 1
    INTEGER              shift, and go to state 2
    REAL                 shift, and go to state 3
    LOCAL                shift, and go to state 4
    NIL                  shift, and go to state 5
    ID                   shift, and go to state 6
    IF                   shift, and go to state 7
    WHILE                shift, and go to state 8
    FOR                  shift, and go to state 9
    FUNCTION             shift, and go to state 10
    RETURN               shift, and go to state 11
    BREAK                shift, and go to state 12
    CONTINUE             shift, and go to state 13
    NOT                  shift, and go to state 14
    TRUE                 shift, and go to state 15
    FALSE                shift, and go to state 16
    MINUS                shift, and go to state 17
    MINUSMINUS           shift, and go to state 18
    PLUSPLUS             shift, and go to state 19
    CURLY_START_BRACKET  shift, and go to state 20
    START_BRACKET        shift, and go to state 21
    START_PARENTHESIS    shift, and go to state 22
    SEMICOLON            shift, and go to state 23
    DOUBLE_COLON         shift, and go to state 24

    stmt        go to state 97
    expr        go to state 28
    term        go to state 29
    primary     go to state 30
    lvalue      go to state 31
    assignexpr  go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    block       go to state 36
    funcdef     go to state 37
    const       go to state 38
    ifprefix    go to state 39
    ifstmt      go to state 40
    whilestart  go to state 41
    whilestmt   go to state 42
    forprefix   go to state 43
    forstmt     go to state 44
    returnstmt  go to state 45


State 40

    5 stmt: ifstmt .

    $default  reduce using rule 5 (stmt)


State 41

  109 whilestmt: whilestart . whilecond stmt

    START_PARENTHESIS  shift, and go to state 98

    whilecond  go to state 99


State 42

    6 stmt: whilestmt .

    $default  reduce using rule 6 (stmt)


State 43

  114 forstmt: forprefix . N elist END_PARENTHESIS N stmt N

    $default  reduce using rule 110 (N)

    N  go to state 100


State 44

    7 stmt: forstmt .

    $default  reduce using rule 7 (stmt)


State 45

    8 stmt: returnstmt .

    $default  reduce using rule 8 (stmt)


State 46

   48 lvalue: LOCAL ID .

    $default  reduce using rule 48 (lvalue)


State 47

  103 ifprefix: IF START_PARENTHESIS . expr END_PARENTHESIS

    STRING             shift, and go to state 1
    INTEGER            shift, and go to state 2
    REAL               shift, and go to state 3
    LOCAL              shift, and go to state 4
    NIL                shift, and go to state 5
    ID                 shift, and go to state 6
    NOT                shift, and go to state 14
    TRUE               shift, and go to state 15
    FALSE              shift, and go to state 16
    MINUS              shift, and go to state 17
    MINUSMINUS         shift, and go to state 18
    PLUSPLUS           shift, and go to state 19
    START_BRACKET      shift, and go to state 21
    START_PARENTHESIS  shift, and go to state 22
    DOUBLE_COLON       shift, and go to state 24

    expr        go to state 101
    term        go to state 29
    primary     go to state 30
    lvalue      go to state 31
    assignexpr  go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 48

  113 forprefix: FOR $@20 . START_PARENTHESIS elist SEMICOLON M expr SEMICOLON

    START_PARENTHESIS  shift, and go to state 102


State 49

   85 funcdef: FUNCTION $@11 . START_PARENTHESIS $@12 idlist END_PARENTHESIS $@13 block

    START_PARENTHESIS  shift, and go to state 103


State 50

   90 funcdef: FUNCTION $@14 . ID $@15 START_PARENTHESIS $@16 idlist END_PARENTHESIS $@17 block

    ID  shift, and go to state 104


State 51

  116 returnstmt: RETURN $@21 . expr SEMICOLON

    STRING             shift, and go to state 1
    INTEGER            shift, and go to state 2
    REAL               shift, and go to state 3
    LOCAL              shift, and go to state 4
    NIL                shift, and go to state 5
    ID                 shift, and go to state 6
    NOT                shift, and go to state 14
    TRUE               shift, and go to state 15
    FALSE              shift, and go to state 16
    MINUS              shift, and go to state 17
    MINUSMINUS         shift, and go to state 18
    PLUSPLUS           shift, and go to state 19
    START_BRACKET      shift, and go to state 21
    START_PARENTHESIS  shift, and go to state 22
    DOUBLE_COLON       shift, and go to state 24

    expr        go to state 105
    term        go to state 29
    primary     go to state 30
    lvalue      go to state 31
    assignexpr  go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 52

  118 returnstmt: RETURN $@22 . SEMICOLON

    SEMICOLON  shift, and go to state 106


State 53

   10 stmt: BREAK $@1 . SEMICOLON

    SEMICOLON  shift, and go to state 107


State 54

   12 stmt: CONTINUE $@2 . SEMICOLON

    SEMICOLON  shift, and go to state 108


State 55

   17 expr: expr . PLUS expr
   18     | expr . MINUS expr
   19     | expr . MULTIPLY expr
   20     | expr . DIV expr
   21     | expr . MOD expr
   22     | expr . BIGGER expr
   23     | expr . BIGGER_EQ expr
   24     | expr . LESS expr
   25     | expr . LESS_EQ expr
   26     | expr . EQUAL expr
   27     | expr . DIFFER expr
   28     | expr . AND Q expr
   29     | expr . OR Q expr
   41 term: NOT expr .

    $default  reduce using rule 41 (term)


State 56

   17 expr: expr . PLUS expr
   18     | expr . MINUS expr
   19     | expr . MULTIPLY expr
   20     | expr . DIV expr
   21     | expr . MOD expr
   22     | expr . BIGGER expr
   23     | expr . BIGGER_EQ expr
   24     | expr . LESS expr
   25     | expr . LESS_EQ expr
   26     | expr . EQUAL expr
   27     | expr . DIFFER expr
   28     | expr . AND Q expr
   29     | expr . OR Q expr
   34 term: MINUS expr .

    $default  reduce using rule 34 (term)


State 57

   63 call: START_PARENTHESIS . funcdef END_PARENTHESIS START_PARENTHESIS elist END_PARENTHESIS

    FUNCTION  shift, and go to state 10

    funcdef  go to state 109


State 58

   38 term: MINUSMINUS lvalue .
   55 member: lvalue . DOT $@6 ID
   56       | lvalue . START_BRACKET expr END_BRACKET
   62 call: lvalue . $@8 callsuffix

    START_BRACKET  shift, and go to state 87
    DOT            shift, and go to state 88

    START_PARENTHESIS  reduce using rule 61 ($@8)
    DOUBLE_DOT         reduce using rule 61 ($@8)
    $default           reduce using rule 38 (term)

    $@8  go to state 92


State 59

   58 member: call . DOT $@7 ID
   59       | call . START_BRACKET expr END_BRACKET
   60 call: call . START_PARENTHESIS elist END_PARENTHESIS

    START_BRACKET      shift, and go to state 94
    START_PARENTHESIS  shift, and go to state 95
    DOT                shift, and go to state 96


State 60

   35 term: PLUSPLUS lvalue .
   55 member: lvalue . DOT $@6 ID
   56       | lvalue . START_BRACKET expr END_BRACKET
   62 call: lvalue . $@8 callsuffix

    START_BRACKET  shift, and go to state 87
    DOT            shift, and go to state 88

    START_PARENTHESIS  reduce using rule 61 ($@8)
    DOUBLE_DOT         reduce using rule 61 ($@8)
    $default           reduce using rule 35 (term)

    $@8  go to state 92


State 61

   79 block: CURLY_START_BRACKET $@9 . CURLY_END_BRACKET

    CURLY_END_BRACKET  shift, and go to state 110


State 62

   81 block: CURLY_START_BRACKET $@10 . stmt program CURLY_END_BRACKET

    STRING               shift, and go to state 1
    INTEGER              shift, and go to state 2
    REAL                 shift, and go to state 3
    LOCAL                shift, and go to state 4
    NIL                  shift, and go to state 5
    ID                   shift, and go to state 6
    IF                   shift, and go to state 7
    WHILE                shift, and go to state 8
    FOR                  shift, and go to state 9
    FUNCTION             shift, and go to state 10
    RETURN               shift, and go to state 11
    BREAK                shift, and go to state 12
    CONTINUE             shift, and go to state 13
    NOT                  shift, and go to state 14
    TRUE                 shift, and go to state 15
    FALSE                shift, and go to state 16
    MINUS                shift, and go to state 17
    MINUSMINUS           shift, and go to state 18
    PLUSPLUS             shift, and go to state 19
    CURLY_START_BRACKET  shift, and go to state 20
    START_BRACKET        shift, and go to state 21
    START_PARENTHESIS    shift, and go to state 22
    SEMICOLON            shift, and go to state 23
    DOUBLE_COLON         shift, and go to state 24

    stmt        go to state 111
    expr        go to state 28
    term        go to state 29
    primary     go to state 30
    lvalue      go to state 31
    assignexpr  go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    block       go to state 36
    funcdef     go to state 37
    const       go to state 38
    ifprefix    go to state 39
    ifstmt      go to state 40
    whilestart  go to state 41
    whilestmt   go to state 42
    forprefix   go to state 43
    forstmt     go to state 44
    returnstmt  go to state 45


State 63

   77 indexedelem: CURLY_START_BRACKET . expr COLON expr CURLY_END_BRACKET

    STRING             shift, and go to state 1
    INTEGER            shift, and go to state 2
    REAL               shift, and go to state 3
    LOCAL              shift, and go to state 4
    NIL                shift, and go to state 5
    ID                 shift, and go to state 6
    NOT                shift, and go to state 14
    TRUE               shift, and go to state 15
    FALSE              shift, and go to state 16
    MINUS              shift, and go to state 17
    MINUSMINUS         shift, and go to state 18
    PLUSPLUS           shift, and go to state 19
    START_BRACKET      shift, and go to state 21
    START_PARENTHESIS  shift, and go to state 22
    DOUBLE_COLON       shift, and go to state 24

    expr        go to state 112
    term        go to state 29
    primary     go to state 30
    lvalue      go to state 31
    assignexpr  go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 64

   17 expr: expr . PLUS expr
   18     | expr . MINUS expr
   19     | expr . MULTIPLY expr
   20     | expr . DIV expr
   21     | expr . MOD expr
   22     | expr . BIGGER expr
   23     | expr . BIGGER_EQ expr
   24     | expr . LESS expr
   25     | expr . LESS_EQ expr
   26     | expr . EQUAL expr
   27     | expr . DIFFER expr
   28     | expr . AND Q expr
   29     | expr . OR Q expr
   68 elist: expr . commaexpr

    AND        shift, and go to state 73
    OR         shift, and go to state 74
    MINUS      shift, and go to state 75
    EQUAL      shift, and go to state 76
    DIFFER     shift, and go to state 77
    BIGGER     shift, and go to state 78
    LESS       shift, and go to state 79
    BIGGER_EQ  shift, and go to state 80
    LESS_EQ    shift, and go to state 81
    MOD        shift, and go to state 82
    MULTIPLY   shift, and go to state 83
    DIV        shift, and go to state 84
    PLUS       shift, and go to state 85
    COMMA      shift, and go to state 113

    $default  reduce using rule 71 (commaexpr)

    commaexpr  go to state 114


State 65

   72 objectdef: START_BRACKET elist . END_BRACKET

    END_BRACKET  shift, and go to state 115


State 66

   73 objectdef: START_BRACKET indexed . END_BRACKET

    END_BRACKET  shift, and go to state 116


State 67

   74 indexed: indexedelem . commaindexedelem

    COMMA  shift, and go to state 117

    $default  reduce using rule 76 (commaindexedelem)

    commaindexedelem  go to state 118


State 68

   17 expr: expr . PLUS expr
   18     | expr . MINUS expr
   19     | expr . MULTIPLY expr
   20     | expr . DIV expr
   21     | expr . MOD expr
   22     | expr . BIGGER expr
   23     | expr . BIGGER_EQ expr
   24     | expr . LESS expr
   25     | expr . LESS_EQ expr
   26     | expr . EQUAL expr
   27     | expr . DIFFER expr
   28     | expr . AND Q expr
   29     | expr . OR Q expr
   32 term: START_PARENTHESIS expr . END_PARENTHESIS

    AND              shift, and go to state 73
    OR               shift, and go to state 74
    MINUS            shift, and go to state 75
    EQUAL            shift, and go to state 76
    DIFFER           shift, and go to state 77
    BIGGER           shift, and go to state 78
    LESS             shift, and go to state 79
    BIGGER_EQ        shift, and go to state 80
    LESS_EQ          shift, and go to state 81
    MOD              shift, and go to state 82
    MULTIPLY         shift, and go to state 83
    DIV              shift, and go to state 84
    PLUS             shift, and go to state 85
    END_PARENTHESIS  shift, and go to state 119


State 69

   45 primary: START_PARENTHESIS funcdef . END_PARENTHESIS
   63 call: START_PARENTHESIS funcdef . END_PARENTHESIS START_PARENTHESIS elist END_PARENTHESIS

    END_PARENTHESIS  shift, and go to state 120


State 70

   49 lvalue: DOUBLE_COLON ID .

    $default  reduce using rule 49 (lvalue)


State 71

    0 $accept: program $end .

    $default  accept


State 72

    2 stmts: stmt stmts .

    $default  reduce using rule 2 (stmts)


State 73

   28 expr: expr AND . Q expr

    $default  reduce using rule 31 (Q)

    Q  go to state 121


State 74

   29 expr: expr OR . Q expr

    $default  reduce using rule 31 (Q)

    Q  go to state 122


State 75

   18 expr: expr MINUS . expr

    STRING             shift, and go to state 1
    INTEGER            shift, and go to state 2
    REAL               shift, and go to state 3
    LOCAL              shift, and go to state 4
    NIL                shift, and go to state 5
    ID                 shift, and go to state 6
    NOT                shift, and go to state 14
    TRUE               shift, and go to state 15
    FALSE              shift, and go to state 16
    MINUS              shift, and go to state 17
    MINUSMINUS         shift, and go to state 18
    PLUSPLUS           shift, and go to state 19
    START_BRACKET      shift, and go to state 21
    START_PARENTHESIS  shift, and go to state 22
    DOUBLE_COLON       shift, and go to state 24

    expr        go to state 123
    term        go to state 29
    primary     go to state 30
    lvalue      go to state 31
    assignexpr  go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 76

   26 expr: expr EQUAL . expr

    STRING             shift, and go to state 1
    INTEGER            shift, and go to state 2
    REAL               shift, and go to state 3
    LOCAL              shift, and go to state 4
    NIL                shift, and go to state 5
    ID                 shift, and go to state 6
    NOT                shift, and go to state 14
    TRUE               shift, and go to state 15
    FALSE              shift, and go to state 16
    MINUS              shift, and go to state 17
    MINUSMINUS         shift, and go to state 18
    PLUSPLUS           shift, and go to state 19
    START_BRACKET      shift, and go to state 21
    START_PARENTHESIS  shift, and go to state 22
    DOUBLE_COLON       shift, and go to state 24

    expr        go to state 124
    term        go to state 29
    primary     go to state 30
    lvalue      go to state 31
    assignexpr  go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 77

   27 expr: expr DIFFER . expr

    STRING             shift, and go to state 1
    INTEGER            shift, and go to state 2
    REAL               shift, and go to state 3
    LOCAL              shift, and go to state 4
    NIL                shift, and go to state 5
    ID                 shift, and go to state 6
    NOT                shift, and go to state 14
    TRUE               shift, and go to state 15
    FALSE              shift, and go to state 16
    MINUS              shift, and go to state 17
    MINUSMINUS         shift, and go to state 18
    PLUSPLUS           shift, and go to state 19
    START_BRACKET      shift, and go to state 21
    START_PARENTHESIS  shift, and go to state 22
    DOUBLE_COLON       shift, and go to state 24

    expr        go to state 125
    term        go to state 29
    primary     go to state 30
    lvalue      go to state 31
    assignexpr  go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 78

   22 expr: expr BIGGER . expr

    STRING             shift, and go to state 1
    INTEGER            shift, and go to state 2
    REAL               shift, and go to state 3
    LOCAL              shift, and go to state 4
    NIL                shift, and go to state 5
    ID                 shift, and go to state 6
    NOT                shift, and go to state 14
    TRUE               shift, and go to state 15
    FALSE              shift, and go to state 16
    MINUS              shift, and go to state 17
    MINUSMINUS         shift, and go to state 18
    PLUSPLUS           shift, and go to state 19
    START_BRACKET      shift, and go to state 21
    START_PARENTHESIS  shift, and go to state 22
    DOUBLE_COLON       shift, and go to state 24

    expr        go to state 126
    term        go to state 29
    primary     go to state 30
    lvalue      go to state 31
    assignexpr  go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 79

   24 expr: expr LESS . expr

    STRING             shift, and go to state 1
    INTEGER            shift, and go to state 2
    REAL               shift, and go to state 3
    LOCAL              shift, and go to state 4
    NIL                shift, and go to state 5
    ID                 shift, and go to state 6
    NOT                shift, and go to state 14
    TRUE               shift, and go to state 15
    FALSE              shift, and go to state 16
    MINUS              shift, and go to state 17
    MINUSMINUS         shift, and go to state 18
    PLUSPLUS           shift, and go to state 19
    START_BRACKET      shift, and go to state 21
    START_PARENTHESIS  shift, and go to state 22
    DOUBLE_COLON       shift, and go to state 24

    expr        go to state 127
    term        go to state 29
    primary     go to state 30
    lvalue      go to state 31
    assignexpr  go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 80

   23 expr: expr BIGGER_EQ . expr

    STRING             shift, and go to state 1
    INTEGER            shift, and go to state 2
    REAL               shift, and go to state 3
    LOCAL              shift, and go to state 4
    NIL                shift, and go to state 5
    ID                 shift, and go to state 6
    NOT                shift, and go to state 14
    TRUE               shift, and go to state 15
    FALSE              shift, and go to state 16
    MINUS              shift, and go to state 17
    MINUSMINUS         shift, and go to state 18
    PLUSPLUS           shift, and go to state 19
    START_BRACKET      shift, and go to state 21
    START_PARENTHESIS  shift, and go to state 22
    DOUBLE_COLON       shift, and go to state 24

    expr        go to state 128
    term        go to state 29
    primary     go to state 30
    lvalue      go to state 31
    assignexpr  go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 81

   25 expr: expr LESS_EQ . expr

    STRING             shift, and go to state 1
    INTEGER            shift, and go to state 2
    REAL               shift, and go to state 3
    LOCAL              shift, and go to state 4
    NIL                shift, and go to state 5
    ID                 shift, and go to state 6
    NOT                shift, and go to state 14
    TRUE               shift, and go to state 15
    FALSE              shift, and go to state 16
    MINUS              shift, and go to state 17
    MINUSMINUS         shift, and go to state 18
    PLUSPLUS           shift, and go to state 19
    START_BRACKET      shift, and go to state 21
    START_PARENTHESIS  shift, and go to state 22
    DOUBLE_COLON       shift, and go to state 24

    expr        go to state 129
    term        go to state 29
    primary     go to state 30
    lvalue      go to state 31
    assignexpr  go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 82

   21 expr: expr MOD . expr

    STRING             shift, and go to state 1
    INTEGER            shift, and go to state 2
    REAL               shift, and go to state 3
    LOCAL              shift, and go to state 4
    NIL                shift, and go to state 5
    ID                 shift, and go to state 6
    NOT                shift, and go to state 14
    TRUE               shift, and go to state 15
    FALSE              shift, and go to state 16
    MINUS              shift, and go to state 17
    MINUSMINUS         shift, and go to state 18
    PLUSPLUS           shift, and go to state 19
    START_BRACKET      shift, and go to state 21
    START_PARENTHESIS  shift, and go to state 22
    DOUBLE_COLON       shift, and go to state 24

    expr        go to state 130
    term        go to state 29
    primary     go to state 30
    lvalue      go to state 31
    assignexpr  go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 83

   19 expr: expr MULTIPLY . expr

    STRING             shift, and go to state 1
    INTEGER            shift, and go to state 2
    REAL               shift, and go to state 3
    LOCAL              shift, and go to state 4
    NIL                shift, and go to state 5
    ID                 shift, and go to state 6
    NOT                shift, and go to state 14
    TRUE               shift, and go to state 15
    FALSE              shift, and go to state 16
    MINUS              shift, and go to state 17
    MINUSMINUS         shift, and go to state 18
    PLUSPLUS           shift, and go to state 19
    START_BRACKET      shift, and go to state 21
    START_PARENTHESIS  shift, and go to state 22
    DOUBLE_COLON       shift, and go to state 24

    expr        go to state 131
    term        go to state 29
    primary     go to state 30
    lvalue      go to state 31
    assignexpr  go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 84

   20 expr: expr DIV . expr

    STRING             shift, and go to state 1
    INTEGER            shift, and go to state 2
    REAL               shift, and go to state 3
    LOCAL              shift, and go to state 4
    NIL                shift, and go to state 5
    ID                 shift, and go to state 6
    NOT                shift, and go to state 14
    TRUE               shift, and go to state 15
    FALSE              shift, and go to state 16
    MINUS              shift, and go to state 17
    MINUSMINUS         shift, and go to state 18
    PLUSPLUS           shift, and go to state 19
    START_BRACKET      shift, and go to state 21
    START_PARENTHESIS  shift, and go to state 22
    DOUBLE_COLON       shift, and go to state 24

    expr        go to state 132
    term        go to state 29
    primary     go to state 30
    lvalue      go to state 31
    assignexpr  go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 85

   17 expr: expr PLUS . expr

    STRING             shift, and go to state 1
    INTEGER            shift, and go to state 2
    REAL               shift, and go to state 3
    LOCAL              shift, and go to state 4
    NIL                shift, and go to state 5
    ID                 shift, and go to state 6
    NOT                shift, and go to state 14
    TRUE               shift, and go to state 15
    FALSE              shift, and go to state 16
    MINUS              shift, and go to state 17
    MINUSMINUS         shift, and go to state 18
    PLUSPLUS           shift, and go to state 19
    START_BRACKET      shift, and go to state 21
    START_PARENTHESIS  shift, and go to state 22
    DOUBLE_COLON       shift, and go to state 24

    expr        go to state 133
    term        go to state 29
    primary     go to state 30
    lvalue      go to state 31
    assignexpr  go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 86

    4 stmt: expr SEMICOLON .

    $default  reduce using rule 4 (stmt)


State 87

   56 member: lvalue START_BRACKET . expr END_BRACKET

    STRING             shift, and go to state 1
    INTEGER            shift, and go to state 2
    REAL               shift, and go to state 3
    LOCAL              shift, and go to state 4
    NIL                shift, and go to state 5
    ID                 shift, and go to state 6
    NOT                shift, and go to state 14
    TRUE               shift, and go to state 15
    FALSE              shift, and go to state 16
    MINUS              shift, and go to state 17
    MINUSMINUS         shift, and go to state 18
    PLUSPLUS           shift, and go to state 19
    START_BRACKET      shift, and go to state 21
    START_PARENTHESIS  shift, and go to state 22
    DOUBLE_COLON       shift, and go to state 24

    expr        go to state 134
    term        go to state 29
    primary     go to state 30
    lvalue      go to state 31
    assignexpr  go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 88

   55 member: lvalue DOT . $@6 ID

    $default  reduce using rule 54 ($@6)

    $@6  go to state 135


State 89

   37 term: lvalue $@3 . PLUSPLUS

    PLUSPLUS  shift, and go to state 136


State 90

   40 term: lvalue $@4 . MINUSMINUS

    MINUSMINUS  shift, and go to state 137


State 91

   52 assignexpr: lvalue $@5 . ASSIGN expr

    ASSIGN  shift, and go to state 138


State 92

   62 call: lvalue $@8 . callsuffix

    START_PARENTHESIS  shift, and go to state 139
    DOUBLE_DOT         shift, and go to state 140

    callsuffix  go to state 141
    normcall    go to state 142
    methodcall  go to state 143


State 93

   53 assignexpr: call ASSIGN . expr

    STRING             shift, and go to state 1
    INTEGER            shift, and go to state 2
    REAL               shift, and go to state 3
    LOCAL              shift, and go to state 4
    NIL                shift, and go to state 5
    ID                 shift, and go to state 6
    NOT                shift, and go to state 14
    TRUE               shift, and go to state 15
    FALSE              shift, and go to state 16
    MINUS              shift, and go to state 17
    MINUSMINUS         shift, and go to state 18
    PLUSPLUS           shift, and go to state 19
    START_BRACKET      shift, and go to state 21
    START_PARENTHESIS  shift, and go to state 22
    DOUBLE_COLON       shift, and go to state 24

    expr        go to state 144
    term        go to state 29
    primary     go to state 30
    lvalue      go to state 31
    assignexpr  go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 94

   59 member: call START_BRACKET . expr END_BRACKET

    STRING             shift, and go to state 1
    INTEGER            shift, and go to state 2
    REAL               shift, and go to state 3
    LOCAL              shift, and go to state 4
    NIL                shift, and go to state 5
    ID                 shift, and go to state 6
    NOT                shift, and go to state 14
    TRUE               shift, and go to state 15
    FALSE              shift, and go to state 16
    MINUS              shift, and go to state 17
    MINUSMINUS         shift, and go to state 18
    PLUSPLUS           shift, and go to state 19
    START_BRACKET      shift, and go to state 21
    START_PARENTHESIS  shift, and go to state 22
    DOUBLE_COLON       shift, and go to state 24

    expr        go to state 145
    term        go to state 29
    primary     go to state 30
    lvalue      go to state 31
    assignexpr  go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 95

   60 call: call START_PARENTHESIS . elist END_PARENTHESIS

    STRING             shift, and go to state 1
    INTEGER            shift, and go to state 2
    REAL               shift, and go to state 3
    LOCAL              shift, and go to state 4
    NIL                shift, and go to state 5
    ID                 shift, and go to state 6
    NOT                shift, and go to state 14
    TRUE               shift, and go to state 15
    FALSE              shift, and go to state 16
    MINUS              shift, and go to state 17
    MINUSMINUS         shift, and go to state 18
    PLUSPLUS           shift, and go to state 19
    START_BRACKET      shift, and go to state 21
    START_PARENTHESIS  shift, and go to state 22
    DOUBLE_COLON       shift, and go to state 24

    $default  reduce using rule 69 (elist)

    expr        go to state 64
    term        go to state 29
    primary     go to state 30
    lvalue      go to state 31
    assignexpr  go to state 32
    member      go to state 33
    call        go to state 34
    elist       go to state 146
    objectdef   go to state 35
    const       go to state 38


State 96

   58 member: call DOT . $@7 ID

    $default  reduce using rule 57 ($@7)

    $@7  go to state 147


State 97

  104 ifstmt: ifprefix stmt .
  105       | ifprefix stmt . elseprefix stmt

    ELSE  shift, and go to state 148

    ELSE      [reduce using rule 104 (ifstmt)]
    $default  reduce using rule 104 (ifstmt)

    elseprefix  go to state 149


State 98

  108 whilecond: START_PARENTHESIS . expr END_PARENTHESIS

    STRING             shift, and go to state 1
    INTEGER            shift, and go to state 2
    REAL               shift, and go to state 3
    LOCAL              shift, and go to state 4
    NIL                shift, and go to state 5
    ID                 shift, and go to state 6
    NOT                shift, and go to state 14
    TRUE               shift, and go to state 15
    FALSE              shift, and go to state 16
    MINUS              shift, and go to state 17
    MINUSMINUS         shift, and go to state 18
    PLUSPLUS           shift, and go to state 19
    START_BRACKET      shift, and go to state 21
    START_PARENTHESIS  shift, and go to state 22
    DOUBLE_COLON       shift, and go to state 24

    expr        go to state 150
    term        go to state 29
    primary     go to state 30
    lvalue      go to state 31
    assignexpr  go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 99

  109 whilestmt: whilestart whilecond . stmt

    STRING               shift, and go to state 1
    INTEGER              shift, and go to state 2
    REAL                 shift, and go to state 3
    LOCAL                shift, and go to state 4
    NIL                  shift, and go to state 5
    ID                   shift, and go to state 6
    IF                   shift, and go to state 7
    WHILE                shift, and go to state 8
    FOR                  shift, and go to state 9
    FUNCTION             shift, and go to state 10
    RETURN               shift, and go to state 11
    BREAK                shift, and go to state 12
    CONTINUE             shift, and go to state 13
    NOT                  shift, and go to state 14
    TRUE                 shift, and go to state 15
    FALSE                shift, and go to state 16
    MINUS                shift, and go to state 17
    MINUSMINUS           shift, and go to state 18
    PLUSPLUS             shift, and go to state 19
    CURLY_START_BRACKET  shift, and go to state 20
    START_BRACKET        shift, and go to state 21
    START_PARENTHESIS    shift, and go to state 22
    SEMICOLON            shift, and go to state 23
    DOUBLE_COLON         shift, and go to state 24

    stmt        go to state 151
    expr        go to state 28
    term        go to state 29
    primary     go to state 30
    lvalue      go to state 31
    assignexpr  go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    block       go to state 36
    funcdef     go to state 37
    const       go to state 38
    ifprefix    go to state 39
    ifstmt      go to state 40
    whilestart  go to state 41
    whilestmt   go to state 42
    forprefix   go to state 43
    forstmt     go to state 44
    returnstmt  go to state 45


State 100

  114 forstmt: forprefix N . elist END_PARENTHESIS N stmt N

    STRING             shift, and go to state 1
    INTEGER            shift, and go to state 2
    REAL               shift, and go to state 3
    LOCAL              shift, and go to state 4
    NIL                shift, and go to state 5
    ID                 shift, and go to state 6
    NOT                shift, and go to state 14
    TRUE               shift, and go to state 15
    FALSE              shift, and go to state 16
    MINUS              shift, and go to state 17
    MINUSMINUS         shift, and go to state 18
    PLUSPLUS           shift, and go to state 19
    START_BRACKET      shift, and go to state 21
    START_PARENTHESIS  shift, and go to state 22
    DOUBLE_COLON       shift, and go to state 24

    $default  reduce using rule 69 (elist)

    expr        go to state 64
    term        go to state 29
    primary     go to state 30
    lvalue      go to state 31
    assignexpr  go to state 32
    member      go to state 33
    call        go to state 34
    elist       go to state 152
    objectdef   go to state 35
    const       go to state 38


State 101

   17 expr: expr . PLUS expr
   18     | expr . MINUS expr
   19     | expr . MULTIPLY expr
   20     | expr . DIV expr
   21     | expr . MOD expr
   22     | expr . BIGGER expr
   23     | expr . BIGGER_EQ expr
   24     | expr . LESS expr
   25     | expr . LESS_EQ expr
   26     | expr . EQUAL expr
   27     | expr . DIFFER expr
   28     | expr . AND Q expr
   29     | expr . OR Q expr
  103 ifprefix: IF START_PARENTHESIS expr . END_PARENTHESIS

    AND              shift, and go to state 73
    OR               shift, and go to state 74
    MINUS            shift, and go to state 75
    EQUAL            shift, and go to state 76
    DIFFER           shift, and go to state 77
    BIGGER           shift, and go to state 78
    LESS             shift, and go to state 79
    BIGGER_EQ        shift, and go to state 80
    LESS_EQ          shift, and go to state 81
    MOD              shift, and go to state 82
    MULTIPLY         shift, and go to state 83
    DIV              shift, and go to state 84
    PLUS             shift, and go to state 85
    END_PARENTHESIS  shift, and go to state 153


State 102

  113 forprefix: FOR $@20 START_PARENTHESIS . elist SEMICOLON M expr SEMICOLON

    STRING             shift, and go to state 1
    INTEGER            shift, and go to state 2
    REAL               shift, and go to state 3
    LOCAL              shift, and go to state 4
    NIL                shift, and go to state 5
    ID                 shift, and go to state 6
    NOT                shift, and go to state 14
    TRUE               shift, and go to state 15
    FALSE              shift, and go to state 16
    MINUS              shift, and go to state 17
    MINUSMINUS         shift, and go to state 18
    PLUSPLUS           shift, and go to state 19
    START_BRACKET      shift, and go to state 21
    START_PARENTHESIS  shift, and go to state 22
    DOUBLE_COLON       shift, and go to state 24

    $default  reduce using rule 69 (elist)

    expr        go to state 64
    term        go to state 29
    primary     go to state 30
    lvalue      go to state 31
    assignexpr  go to state 32
    member      go to state 33
    call        go to state 34
    elist       go to state 154
    objectdef   go to state 35
    const       go to state 38


State 103

   85 funcdef: FUNCTION $@11 START_PARENTHESIS . $@12 idlist END_PARENTHESIS $@13 block

    $default  reduce using rule 83 ($@12)

    $@12  go to state 155


State 104

   90 funcdef: FUNCTION $@14 ID . $@15 START_PARENTHESIS $@16 idlist END_PARENTHESIS $@17 block

    $default  reduce using rule 87 ($@15)

    $@15  go to state 156


State 105

   17 expr: expr . PLUS expr
   18     | expr . MINUS expr
   19     | expr . MULTIPLY expr
   20     | expr . DIV expr
   21     | expr . MOD expr
   22     | expr . BIGGER expr
   23     | expr . BIGGER_EQ expr
   24     | expr . LESS expr
   25     | expr . LESS_EQ expr
   26     | expr . EQUAL expr
   27     | expr . DIFFER expr
   28     | expr . AND Q expr
   29     | expr . OR Q expr
  116 returnstmt: RETURN $@21 expr . SEMICOLON

    AND        shift, and go to state 73
    OR         shift, and go to state 74
    MINUS      shift, and go to state 75
    EQUAL      shift, and go to state 76
    DIFFER     shift, and go to state 77
    BIGGER     shift, and go to state 78
    LESS       shift, and go to state 79
    BIGGER_EQ  shift, and go to state 80
    LESS_EQ    shift, and go to state 81
    MOD        shift, and go to state 82
    MULTIPLY   shift, and go to state 83
    DIV        shift, and go to state 84
    PLUS       shift, and go to state 85
    SEMICOLON  shift, and go to state 157


State 106

  118 returnstmt: RETURN $@22 SEMICOLON .

    $default  reduce using rule 118 (returnstmt)


State 107

   10 stmt: BREAK $@1 SEMICOLON .

    $default  reduce using rule 10 (stmt)


State 108

   12 stmt: CONTINUE $@2 SEMICOLON .

    $default  reduce using rule 12 (stmt)


State 109

   63 call: START_PARENTHESIS funcdef . END_PARENTHESIS START_PARENTHESIS elist END_PARENTHESIS

    END_PARENTHESIS  shift, and go to state 158


State 110

   79 block: CURLY_START_BRACKET $@9 CURLY_END_BRACKET .

    $default  reduce using rule 79 (block)


State 111

   81 block: CURLY_START_BRACKET $@10 stmt . program CURLY_END_BRACKET

    STRING               shift, and go to state 1
    INTEGER              shift, and go to state 2
    REAL                 shift, and go to state 3
    LOCAL                shift, and go to state 4
    NIL                  shift, and go to state 5
    ID                   shift, and go to state 6
    IF                   shift, and go to state 7
    WHILE                shift, and go to state 8
    FOR                  shift, and go to state 9
    FUNCTION             shift, and go to state 10
    RETURN               shift, and go to state 11
    BREAK                shift, and go to state 12
    CONTINUE             shift, and go to state 13
    NOT                  shift, and go to state 14
    TRUE                 shift, and go to state 15
    FALSE                shift, and go to state 16
    MINUS                shift, and go to state 17
    MINUSMINUS           shift, and go to state 18
    PLUSPLUS             shift, and go to state 19
    CURLY_START_BRACKET  shift, and go to state 20
    START_BRACKET        shift, and go to state 21
    START_PARENTHESIS    shift, and go to state 22
    SEMICOLON            shift, and go to state 23
    DOUBLE_COLON         shift, and go to state 24

    $default  reduce using rule 3 (stmts)

    program     go to state 159
    stmts       go to state 26
    stmt        go to state 27
    expr        go to state 28
    term        go to state 29
    primary     go to state 30
    lvalue      go to state 31
    assignexpr  go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    block       go to state 36
    funcdef     go to state 37
    const       go to state 38
    ifprefix    go to state 39
    ifstmt      go to state 40
    whilestart  go to state 41
    whilestmt   go to state 42
    forprefix   go to state 43
    forstmt     go to state 44
    returnstmt  go to state 45


State 112

   17 expr: expr . PLUS expr
   18     | expr . MINUS expr
   19     | expr . MULTIPLY expr
   20     | expr . DIV expr
   21     | expr . MOD expr
   22     | expr . BIGGER expr
   23     | expr . BIGGER_EQ expr
   24     | expr . LESS expr
   25     | expr . LESS_EQ expr
   26     | expr . EQUAL expr
   27     | expr . DIFFER expr
   28     | expr . AND Q expr
   29     | expr . OR Q expr
   77 indexedelem: CURLY_START_BRACKET expr . COLON expr CURLY_END_BRACKET

    AND        shift, and go to state 73
    OR         shift, and go to state 74
    MINUS      shift, and go to state 75
    EQUAL      shift, and go to state 76
    DIFFER     shift, and go to state 77
    BIGGER     shift, and go to state 78
    LESS       shift, and go to state 79
    BIGGER_EQ  shift, and go to state 80
    LESS_EQ    shift, and go to state 81
    MOD        shift, and go to state 82
    MULTIPLY   shift, and go to state 83
    DIV        shift, and go to state 84
    PLUS       shift, and go to state 85
    COLON      shift, and go to state 160


State 113

   70 commaexpr: COMMA . expr commaexpr

    STRING             shift, and go to state 1
    INTEGER            shift, and go to state 2
    REAL               shift, and go to state 3
    LOCAL              shift, and go to state 4
    NIL                shift, and go to state 5
    ID                 shift, and go to state 6
    NOT                shift, and go to state 14
    TRUE               shift, and go to state 15
    FALSE              shift, and go to state 16
    MINUS              shift, and go to state 17
    MINUSMINUS         shift, and go to state 18
    PLUSPLUS           shift, and go to state 19
    START_BRACKET      shift, and go to state 21
    START_PARENTHESIS  shift, and go to state 22
    DOUBLE_COLON       shift, and go to state 24

    expr        go to state 161
    term        go to state 29
    primary     go to state 30
    lvalue      go to state 31
    assignexpr  go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 114

   68 elist: expr commaexpr .

    $default  reduce using rule 68 (elist)


State 115

   72 objectdef: START_BRACKET elist END_BRACKET .

    $default  reduce using rule 72 (objectdef)


State 116

   73 objectdef: START_BRACKET indexed END_BRACKET .

    $default  reduce using rule 73 (objectdef)


State 117

   75 commaindexedelem: COMMA . indexedelem commaindexedelem

    CURLY_START_BRACKET  shift, and go to state 63

    indexedelem  go to state 162


State 118

   74 indexed: indexedelem commaindexedelem .

    $default  reduce using rule 74 (indexed)


State 119

   32 term: START_PARENTHESIS expr END_PARENTHESIS .

    $default  reduce using rule 32 (term)


State 120

   45 primary: START_PARENTHESIS funcdef END_PARENTHESIS .
   63 call: START_PARENTHESIS funcdef END_PARENTHESIS . START_PARENTHESIS elist END_PARENTHESIS

    START_PARENTHESIS  shift, and go to state 163

    $default  reduce using rule 45 (primary)


State 121

   28 expr: expr AND Q . expr

    STRING             shift, and go to state 1
    INTEGER            shift, and go to state 2
    REAL               shift, and go to state 3
    LOCAL              shift, and go to state 4
    NIL                shift, and go to state 5
    ID                 shift, and go to state 6
    NOT                shift, and go to state 14
    TRUE               shift, and go to state 15
    FALSE              shift, and go to state 16
    MINUS              shift, and go to state 17
    MINUSMINUS         shift, and go to state 18
    PLUSPLUS           shift, and go to state 19
    START_BRACKET      shift, and go to state 21
    START_PARENTHESIS  shift, and go to state 22
    DOUBLE_COLON       shift, and go to state 24

    expr        go to state 164
    term        go to state 29
    primary     go to state 30
    lvalue      go to state 31
    assignexpr  go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 122

   29 expr: expr OR Q . expr

    STRING             shift, and go to state 1
    INTEGER            shift, and go to state 2
    REAL               shift, and go to state 3
    LOCAL              shift, and go to state 4
    NIL                shift, and go to state 5
    ID                 shift, and go to state 6
    NOT                shift, and go to state 14
    TRUE               shift, and go to state 15
    FALSE              shift, and go to state 16
    MINUS              shift, and go to state 17
    MINUSMINUS         shift, and go to state 18
    PLUSPLUS           shift, and go to state 19
    START_BRACKET      shift, and go to state 21
    START_PARENTHESIS  shift, and go to state 22
    DOUBLE_COLON       shift, and go to state 24

    expr        go to state 165
    term        go to state 29
    primary     go to state 30
    lvalue      go to state 31
    assignexpr  go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 123

   17 expr: expr . PLUS expr
   18     | expr . MINUS expr
   18     | expr MINUS expr .
   19     | expr . MULTIPLY expr
   20     | expr . DIV expr
   21     | expr . MOD expr
   22     | expr . BIGGER expr
   23     | expr . BIGGER_EQ expr
   24     | expr . LESS expr
   25     | expr . LESS_EQ expr
   26     | expr . EQUAL expr
   27     | expr . DIFFER expr
   28     | expr . AND Q expr
   29     | expr . OR Q expr

    MOD       shift, and go to state 82
    MULTIPLY  shift, and go to state 83
    DIV       shift, and go to state 84

    $default  reduce using rule 18 (expr)


State 124

   17 expr: expr . PLUS expr
   18     | expr . MINUS expr
   19     | expr . MULTIPLY expr
   20     | expr . DIV expr
   21     | expr . MOD expr
   22     | expr . BIGGER expr
   23     | expr . BIGGER_EQ expr
   24     | expr . LESS expr
   25     | expr . LESS_EQ expr
   26     | expr . EQUAL expr
   26     | expr EQUAL expr .
   27     | expr . DIFFER expr
   28     | expr . AND Q expr
   29     | expr . OR Q expr

    MINUS      shift, and go to state 75
    BIGGER     shift, and go to state 78
    LESS       shift, and go to state 79
    BIGGER_EQ  shift, and go to state 80
    LESS_EQ    shift, and go to state 81
    MOD        shift, and go to state 82
    MULTIPLY   shift, and go to state 83
    DIV        shift, and go to state 84
    PLUS       shift, and go to state 85

    EQUAL   error (nonassociative)
    DIFFER  error (nonassociative)

    $default  reduce using rule 26 (expr)


State 125

   17 expr: expr . PLUS expr
   18     | expr . MINUS expr
   19     | expr . MULTIPLY expr
   20     | expr . DIV expr
   21     | expr . MOD expr
   22     | expr . BIGGER expr
   23     | expr . BIGGER_EQ expr
   24     | expr . LESS expr
   25     | expr . LESS_EQ expr
   26     | expr . EQUAL expr
   27     | expr . DIFFER expr
   27     | expr DIFFER expr .
   28     | expr . AND Q expr
   29     | expr . OR Q expr

    MINUS      shift, and go to state 75
    BIGGER     shift, and go to state 78
    LESS       shift, and go to state 79
    BIGGER_EQ  shift, and go to state 80
    LESS_EQ    shift, and go to state 81
    MOD        shift, and go to state 82
    MULTIPLY   shift, and go to state 83
    DIV        shift, and go to state 84
    PLUS       shift, and go to state 85

    EQUAL   error (nonassociative)
    DIFFER  error (nonassociative)

    $default  reduce using rule 27 (expr)


State 126

   17 expr: expr . PLUS expr
   18     | expr . MINUS expr
   19     | expr . MULTIPLY expr
   20     | expr . DIV expr
   21     | expr . MOD expr
   22     | expr . BIGGER expr
   22     | expr BIGGER expr .
   23     | expr . BIGGER_EQ expr
   24     | expr . LESS expr
   25     | expr . LESS_EQ expr
   26     | expr . EQUAL expr
   27     | expr . DIFFER expr
   28     | expr . AND Q expr
   29     | expr . OR Q expr

    MINUS     shift, and go to state 75
    MOD       shift, and go to state 82
    MULTIPLY  shift, and go to state 83
    DIV       shift, and go to state 84
    PLUS      shift, and go to state 85

    BIGGER     error (nonassociative)
    LESS       error (nonassociative)
    BIGGER_EQ  error (nonassociative)
    LESS_EQ    error (nonassociative)

    $default  reduce using rule 22 (expr)


State 127

   17 expr: expr . PLUS expr
   18     | expr . MINUS expr
   19     | expr . MULTIPLY expr
   20     | expr . DIV expr
   21     | expr . MOD expr
   22     | expr . BIGGER expr
   23     | expr . BIGGER_EQ expr
   24     | expr . LESS expr
   24     | expr LESS expr .
   25     | expr . LESS_EQ expr
   26     | expr . EQUAL expr
   27     | expr . DIFFER expr
   28     | expr . AND Q expr
   29     | expr . OR Q expr

    MINUS     shift, and go to state 75
    MOD       shift, and go to state 82
    MULTIPLY  shift, and go to state 83
    DIV       shift, and go to state 84
    PLUS      shift, and go to state 85

    BIGGER     error (nonassociative)
    LESS       error (nonassociative)
    BIGGER_EQ  error (nonassociative)
    LESS_EQ    error (nonassociative)

    $default  reduce using rule 24 (expr)


State 128

   17 expr: expr . PLUS expr
   18     | expr . MINUS expr
   19     | expr . MULTIPLY expr
   20     | expr . DIV expr
   21     | expr . MOD expr
   22     | expr . BIGGER expr
   23     | expr . BIGGER_EQ expr
   23     | expr BIGGER_EQ expr .
   24     | expr . LESS expr
   25     | expr . LESS_EQ expr
   26     | expr . EQUAL expr
   27     | expr . DIFFER expr
   28     | expr . AND Q expr
   29     | expr . OR Q expr

    MINUS     shift, and go to state 75
    MOD       shift, and go to state 82
    MULTIPLY  shift, and go to state 83
    DIV       shift, and go to state 84
    PLUS      shift, and go to state 85

    BIGGER     error (nonassociative)
    LESS       error (nonassociative)
    BIGGER_EQ  error (nonassociative)
    LESS_EQ    error (nonassociative)

    $default  reduce using rule 23 (expr)


State 129

   17 expr: expr . PLUS expr
   18     | expr . MINUS expr
   19     | expr . MULTIPLY expr
   20     | expr . DIV expr
   21     | expr . MOD expr
   22     | expr . BIGGER expr
   23     | expr . BIGGER_EQ expr
   24     | expr . LESS expr
   25     | expr . LESS_EQ expr
   25     | expr LESS_EQ expr .
   26     | expr . EQUAL expr
   27     | expr . DIFFER expr
   28     | expr . AND Q expr
   29     | expr . OR Q expr

    MINUS     shift, and go to state 75
    MOD       shift, and go to state 82
    MULTIPLY  shift, and go to state 83
    DIV       shift, and go to state 84
    PLUS      shift, and go to state 85

    BIGGER     error (nonassociative)
    LESS       error (nonassociative)
    BIGGER_EQ  error (nonassociative)
    LESS_EQ    error (nonassociative)

    $default  reduce using rule 25 (expr)


State 130

   17 expr: expr . PLUS expr
   18     | expr . MINUS expr
   19     | expr . MULTIPLY expr
   20     | expr . DIV expr
   21     | expr . MOD expr
   21     | expr MOD expr .
   22     | expr . BIGGER expr
   23     | expr . BIGGER_EQ expr
   24     | expr . LESS expr
   25     | expr . LESS_EQ expr
   26     | expr . EQUAL expr
   27     | expr . DIFFER expr
   28     | expr . AND Q expr
   29     | expr . OR Q expr

    $default  reduce using rule 21 (expr)


State 131

   17 expr: expr . PLUS expr
   18     | expr . MINUS expr
   19     | expr . MULTIPLY expr
   19     | expr MULTIPLY expr .
   20     | expr . DIV expr
   21     | expr . MOD expr
   22     | expr . BIGGER expr
   23     | expr . BIGGER_EQ expr
   24     | expr . LESS expr
   25     | expr . LESS_EQ expr
   26     | expr . EQUAL expr
   27     | expr . DIFFER expr
   28     | expr . AND Q expr
   29     | expr . OR Q expr

    $default  reduce using rule 19 (expr)


State 132

   17 expr: expr . PLUS expr
   18     | expr . MINUS expr
   19     | expr . MULTIPLY expr
   20     | expr . DIV expr
   20     | expr DIV expr .
   21     | expr . MOD expr
   22     | expr . BIGGER expr
   23     | expr . BIGGER_EQ expr
   24     | expr . LESS expr
   25     | expr . LESS_EQ expr
   26     | expr . EQUAL expr
   27     | expr . DIFFER expr
   28     | expr . AND Q expr
   29     | expr . OR Q expr

    $default  reduce using rule 20 (expr)


State 133

   17 expr: expr . PLUS expr
   17     | expr PLUS expr .
   18     | expr . MINUS expr
   19     | expr . MULTIPLY expr
   20     | expr . DIV expr
   21     | expr . MOD expr
   22     | expr . BIGGER expr
   23     | expr . BIGGER_EQ expr
   24     | expr . LESS expr
   25     | expr . LESS_EQ expr
   26     | expr . EQUAL expr
   27     | expr . DIFFER expr
   28     | expr . AND Q expr
   29     | expr . OR Q expr

    MOD       shift, and go to state 82
    MULTIPLY  shift, and go to state 83
    DIV       shift, and go to state 84

    $default  reduce using rule 17 (expr)


State 134

   17 expr: expr . PLUS expr
   18     | expr . MINUS expr
   19     | expr . MULTIPLY expr
   20     | expr . DIV expr
   21     | expr . MOD expr
   22     | expr . BIGGER expr
   23     | expr . BIGGER_EQ expr
   24     | expr . LESS expr
   25     | expr . LESS_EQ expr
   26     | expr . EQUAL expr
   27     | expr . DIFFER expr
   28     | expr . AND Q expr
   29     | expr . OR Q expr
   56 member: lvalue START_BRACKET expr . END_BRACKET

    AND          shift, and go to state 73
    OR           shift, and go to state 74
    MINUS        shift, and go to state 75
    EQUAL        shift, and go to state 76
    DIFFER       shift, and go to state 77
    BIGGER       shift, and go to state 78
    LESS         shift, and go to state 79
    BIGGER_EQ    shift, and go to state 80
    LESS_EQ      shift, and go to state 81
    MOD          shift, and go to state 82
    MULTIPLY     shift, and go to state 83
    DIV          shift, and go to state 84
    PLUS         shift, and go to state 85
    END_BRACKET  shift, and go to state 166


State 135

   55 member: lvalue DOT $@6 . ID

    ID  shift, and go to state 167


State 136

   37 term: lvalue $@3 PLUSPLUS .

    $default  reduce using rule 37 (term)


State 137

   40 term: lvalue $@4 MINUSMINUS .

    $default  reduce using rule 40 (term)


State 138

   52 assignexpr: lvalue $@5 ASSIGN . expr

    STRING             shift, and go to state 1
    INTEGER            shift, and go to state 2
    REAL               shift, and go to state 3
    LOCAL              shift, and go to state 4
    NIL                shift, and go to state 5
    ID                 shift, and go to state 6
    NOT                shift, and go to state 14
    TRUE               shift, and go to state 15
    FALSE              shift, and go to state 16
    MINUS              shift, and go to state 17
    MINUSMINUS         shift, and go to state 18
    PLUSPLUS           shift, and go to state 19
    START_BRACKET      shift, and go to state 21
    START_PARENTHESIS  shift, and go to state 22
    DOUBLE_COLON       shift, and go to state 24

    expr        go to state 168
    term        go to state 29
    primary     go to state 30
    lvalue      go to state 31
    assignexpr  go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 139

   66 normcall: START_PARENTHESIS . elist END_PARENTHESIS

    STRING             shift, and go to state 1
    INTEGER            shift, and go to state 2
    REAL               shift, and go to state 3
    LOCAL              shift, and go to state 4
    NIL                shift, and go to state 5
    ID                 shift, and go to state 6
    NOT                shift, and go to state 14
    TRUE               shift, and go to state 15
    FALSE              shift, and go to state 16
    MINUS              shift, and go to state 17
    MINUSMINUS         shift, and go to state 18
    PLUSPLUS           shift, and go to state 19
    START_BRACKET      shift, and go to state 21
    START_PARENTHESIS  shift, and go to state 22
    DOUBLE_COLON       shift, and go to state 24

    $default  reduce using rule 69 (elist)

    expr        go to state 64
    term        go to state 29
    primary     go to state 30
    lvalue      go to state 31
    assignexpr  go to state 32
    member      go to state 33
    call        go to state 34
    elist       go to state 169
    objectdef   go to state 35
    const       go to state 38


State 140

   67 methodcall: DOUBLE_DOT . ID START_PARENTHESIS elist END_PARENTHESIS

    ID  shift, and go to state 170


State 141

   62 call: lvalue $@8 callsuffix .

    $default  reduce using rule 62 (call)


State 142

   64 callsuffix: normcall .

    $default  reduce using rule 64 (callsuffix)


State 143

   65 callsuffix: methodcall .

    $default  reduce using rule 65 (callsuffix)


State 144

   17 expr: expr . PLUS expr
   18     | expr . MINUS expr
   19     | expr . MULTIPLY expr
   20     | expr . DIV expr
   21     | expr . MOD expr
   22     | expr . BIGGER expr
   23     | expr . BIGGER_EQ expr
   24     | expr . LESS expr
   25     | expr . LESS_EQ expr
   26     | expr . EQUAL expr
   27     | expr . DIFFER expr
   28     | expr . AND Q expr
   29     | expr . OR Q expr
   53 assignexpr: call ASSIGN expr .

    AND        shift, and go to state 73
    OR         shift, and go to state 74
    MINUS      shift, and go to state 75
    EQUAL      shift, and go to state 76
    DIFFER     shift, and go to state 77
    BIGGER     shift, and go to state 78
    LESS       shift, and go to state 79
    BIGGER_EQ  shift, and go to state 80
    LESS_EQ    shift, and go to state 81
    MOD        shift, and go to state 82
    MULTIPLY   shift, and go to state 83
    DIV        shift, and go to state 84
    PLUS       shift, and go to state 85

    $default  reduce using rule 53 (assignexpr)


State 145

   17 expr: expr . PLUS expr
   18     | expr . MINUS expr
   19     | expr . MULTIPLY expr
   20     | expr . DIV expr
   21     | expr . MOD expr
   22     | expr . BIGGER expr
   23     | expr . BIGGER_EQ expr
   24     | expr . LESS expr
   25     | expr . LESS_EQ expr
   26     | expr . EQUAL expr
   27     | expr . DIFFER expr
   28     | expr . AND Q expr
   29     | expr . OR Q expr
   59 member: call START_BRACKET expr . END_BRACKET

    AND          shift, and go to state 73
    OR           shift, and go to state 74
    MINUS        shift, and go to state 75
    EQUAL        shift, and go to state 76
    DIFFER       shift, and go to state 77
    BIGGER       shift, and go to state 78
    LESS         shift, and go to state 79
    BIGGER_EQ    shift, and go to state 80
    LESS_EQ      shift, and go to state 81
    MOD          shift, and go to state 82
    MULTIPLY     shift, and go to state 83
    DIV          shift, and go to state 84
    PLUS         shift, and go to state 85
    END_BRACKET  shift, and go to state 171


State 146

   60 call: call START_PARENTHESIS elist . END_PARENTHESIS

    END_PARENTHESIS  shift, and go to state 172


State 147

   58 member: call DOT $@7 . ID

    ID  shift, and go to state 173


State 148

  106 elseprefix: ELSE .

    $default  reduce using rule 106 (elseprefix)


State 149

  105 ifstmt: ifprefix stmt elseprefix . stmt

    STRING               shift, and go to state 1
    INTEGER              shift, and go to state 2
    REAL                 shift, and go to state 3
    LOCAL                shift, and go to state 4
    NIL                  shift, and go to state 5
    ID                   shift, and go to state 6
    IF                   shift, and go to state 7
    WHILE                shift, and go to state 8
    FOR                  shift, and go to state 9
    FUNCTION             shift, and go to state 10
    RETURN               shift, and go to state 11
    BREAK                shift, and go to state 12
    CONTINUE             shift, and go to state 13
    NOT                  shift, and go to state 14
    TRUE                 shift, and go to state 15
    FALSE                shift, and go to state 16
    MINUS                shift, and go to state 17
    MINUSMINUS           shift, and go to state 18
    PLUSPLUS             shift, and go to state 19
    CURLY_START_BRACKET  shift, and go to state 20
    START_BRACKET        shift, and go to state 21
    START_PARENTHESIS    shift, and go to state 22
    SEMICOLON            shift, and go to state 23
    DOUBLE_COLON         shift, and go to state 24

    stmt        go to state 174
    expr        go to state 28
    term        go to state 29
    primary     go to state 30
    lvalue      go to state 31
    assignexpr  go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    block       go to state 36
    funcdef     go to state 37
    const       go to state 38
    ifprefix    go to state 39
    ifstmt      go to state 40
    whilestart  go to state 41
    whilestmt   go to state 42
    forprefix   go to state 43
    forstmt     go to state 44
    returnstmt  go to state 45


State 150

   17 expr: expr . PLUS expr
   18     | expr . MINUS expr
   19     | expr . MULTIPLY expr
   20     | expr . DIV expr
   21     | expr . MOD expr
   22     | expr . BIGGER expr
   23     | expr . BIGGER_EQ expr
   24     | expr . LESS expr
   25     | expr . LESS_EQ expr
   26     | expr . EQUAL expr
   27     | expr . DIFFER expr
   28     | expr . AND Q expr
   29     | expr . OR Q expr
  108 whilecond: START_PARENTHESIS expr . END_PARENTHESIS

    AND              shift, and go to state 73
    OR               shift, and go to state 74
    MINUS            shift, and go to state 75
    EQUAL            shift, and go to state 76
    DIFFER           shift, and go to state 77
    BIGGER           shift, and go to state 78
    LESS             shift, and go to state 79
    BIGGER_EQ        shift, and go to state 80
    LESS_EQ          shift, and go to state 81
    MOD              shift, and go to state 82
    MULTIPLY         shift, and go to state 83
    DIV              shift, and go to state 84
    PLUS             shift, and go to state 85
    END_PARENTHESIS  shift, and go to state 175


State 151

  109 whilestmt: whilestart whilecond stmt .

    $default  reduce using rule 109 (whilestmt)


State 152

  114 forstmt: forprefix N elist . END_PARENTHESIS N stmt N

    END_PARENTHESIS  shift, and go to state 176


State 153

  103 ifprefix: IF START_PARENTHESIS expr END_PARENTHESIS .

    $default  reduce using rule 103 (ifprefix)


State 154

  113 forprefix: FOR $@20 START_PARENTHESIS elist . SEMICOLON M expr SEMICOLON

    SEMICOLON  shift, and go to state 177


State 155

   85 funcdef: FUNCTION $@11 START_PARENTHESIS $@12 . idlist END_PARENTHESIS $@13 block

    ID  shift, and go to state 178

    $default  reduce using rule 99 (idlist)

    idlist  go to state 179


State 156

   90 funcdef: FUNCTION $@14 ID $@15 . START_PARENTHESIS $@16 idlist END_PARENTHESIS $@17 block

    START_PARENTHESIS  shift, and go to state 180


State 157

  116 returnstmt: RETURN $@21 expr SEMICOLON .

    $default  reduce using rule 116 (returnstmt)


State 158

   63 call: START_PARENTHESIS funcdef END_PARENTHESIS . START_PARENTHESIS elist END_PARENTHESIS

    START_PARENTHESIS  shift, and go to state 163


State 159

   81 block: CURLY_START_BRACKET $@10 stmt program . CURLY_END_BRACKET

    CURLY_END_BRACKET  shift, and go to state 181


State 160

   77 indexedelem: CURLY_START_BRACKET expr COLON . expr CURLY_END_BRACKET

    STRING             shift, and go to state 1
    INTEGER            shift, and go to state 2
    REAL               shift, and go to state 3
    LOCAL              shift, and go to state 4
    NIL                shift, and go to state 5
    ID                 shift, and go to state 6
    NOT                shift, and go to state 14
    TRUE               shift, and go to state 15
    FALSE              shift, and go to state 16
    MINUS              shift, and go to state 17
    MINUSMINUS         shift, and go to state 18
    PLUSPLUS           shift, and go to state 19
    START_BRACKET      shift, and go to state 21
    START_PARENTHESIS  shift, and go to state 22
    DOUBLE_COLON       shift, and go to state 24

    expr        go to state 182
    term        go to state 29
    primary     go to state 30
    lvalue      go to state 31
    assignexpr  go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 161

   17 expr: expr . PLUS expr
   18     | expr . MINUS expr
   19     | expr . MULTIPLY expr
   20     | expr . DIV expr
   21     | expr . MOD expr
   22     | expr . BIGGER expr
   23     | expr . BIGGER_EQ expr
   24     | expr . LESS expr
   25     | expr . LESS_EQ expr
   26     | expr . EQUAL expr
   27     | expr . DIFFER expr
   28     | expr . AND Q expr
   29     | expr . OR Q expr
   70 commaexpr: COMMA expr . commaexpr

    AND        shift, and go to state 73
    OR         shift, and go to state 74
    MINUS      shift, and go to state 75
    EQUAL      shift, and go to state 76
    DIFFER     shift, and go to state 77
    BIGGER     shift, and go to state 78
    LESS       shift, and go to state 79
    BIGGER_EQ  shift, and go to state 80
    LESS_EQ    shift, and go to state 81
    MOD        shift, and go to state 82
    MULTIPLY   shift, and go to state 83
    DIV        shift, and go to state 84
    PLUS       shift, and go to state 85
    COMMA      shift, and go to state 113

    $default  reduce using rule 71 (commaexpr)

    commaexpr  go to state 183


State 162

   75 commaindexedelem: COMMA indexedelem . commaindexedelem

    COMMA  shift, and go to state 117

    $default  reduce using rule 76 (commaindexedelem)

    commaindexedelem  go to state 184


State 163

   63 call: START_PARENTHESIS funcdef END_PARENTHESIS START_PARENTHESIS . elist END_PARENTHESIS

    STRING             shift, and go to state 1
    INTEGER            shift, and go to state 2
    REAL               shift, and go to state 3
    LOCAL              shift, and go to state 4
    NIL                shift, and go to state 5
    ID                 shift, and go to state 6
    NOT                shift, and go to state 14
    TRUE               shift, and go to state 15
    FALSE              shift, and go to state 16
    MINUS              shift, and go to state 17
    MINUSMINUS         shift, and go to state 18
    PLUSPLUS           shift, and go to state 19
    START_BRACKET      shift, and go to state 21
    START_PARENTHESIS  shift, and go to state 22
    DOUBLE_COLON       shift, and go to state 24

    $default  reduce using rule 69 (elist)

    expr        go to state 64
    term        go to state 29
    primary     go to state 30
    lvalue      go to state 31
    assignexpr  go to state 32
    member      go to state 33
    call        go to state 34
    elist       go to state 185
    objectdef   go to state 35
    const       go to state 38


State 164

   17 expr: expr . PLUS expr
   18     | expr . MINUS expr
   19     | expr . MULTIPLY expr
   20     | expr . DIV expr
   21     | expr . MOD expr
   22     | expr . BIGGER expr
   23     | expr . BIGGER_EQ expr
   24     | expr . LESS expr
   25     | expr . LESS_EQ expr
   26     | expr . EQUAL expr
   27     | expr . DIFFER expr
   28     | expr . AND Q expr
   28     | expr AND Q expr .
   29     | expr . OR Q expr

    MINUS      shift, and go to state 75
    EQUAL      shift, and go to state 76
    DIFFER     shift, and go to state 77
    BIGGER     shift, and go to state 78
    LESS       shift, and go to state 79
    BIGGER_EQ  shift, and go to state 80
    LESS_EQ    shift, and go to state 81
    MOD        shift, and go to state 82
    MULTIPLY   shift, and go to state 83
    DIV        shift, and go to state 84
    PLUS       shift, and go to state 85

    $default  reduce using rule 28 (expr)


State 165

   17 expr: expr . PLUS expr
   18     | expr . MINUS expr
   19     | expr . MULTIPLY expr
   20     | expr . DIV expr
   21     | expr . MOD expr
   22     | expr . BIGGER expr
   23     | expr . BIGGER_EQ expr
   24     | expr . LESS expr
   25     | expr . LESS_EQ expr
   26     | expr . EQUAL expr
   27     | expr . DIFFER expr
   28     | expr . AND Q expr
   29     | expr . OR Q expr
   29     | expr OR Q expr .

    AND        shift, and go to state 73
    MINUS      shift, and go to state 75
    EQUAL      shift, and go to state 76
    DIFFER     shift, and go to state 77
    BIGGER     shift, and go to state 78
    LESS       shift, and go to state 79
    BIGGER_EQ  shift, and go to state 80
    LESS_EQ    shift, and go to state 81
    MOD        shift, and go to state 82
    MULTIPLY   shift, and go to state 83
    DIV        shift, and go to state 84
    PLUS       shift, and go to state 85

    $default  reduce using rule 29 (expr)


State 166

   56 member: lvalue START_BRACKET expr END_BRACKET .

    $default  reduce using rule 56 (member)


State 167

   55 member: lvalue DOT $@6 ID .

    $default  reduce using rule 55 (member)


State 168

   17 expr: expr . PLUS expr
   18     | expr . MINUS expr
   19     | expr . MULTIPLY expr
   20     | expr . DIV expr
   21     | expr . MOD expr
   22     | expr . BIGGER expr
   23     | expr . BIGGER_EQ expr
   24     | expr . LESS expr
   25     | expr . LESS_EQ expr
   26     | expr . EQUAL expr
   27     | expr . DIFFER expr
   28     | expr . AND Q expr
   29     | expr . OR Q expr
   52 assignexpr: lvalue $@5 ASSIGN expr .

    AND        shift, and go to state 73
    OR         shift, and go to state 74
    MINUS      shift, and go to state 75
    EQUAL      shift, and go to state 76
    DIFFER     shift, and go to state 77
    BIGGER     shift, and go to state 78
    LESS       shift, and go to state 79
    BIGGER_EQ  shift, and go to state 80
    LESS_EQ    shift, and go to state 81
    MOD        shift, and go to state 82
    MULTIPLY   shift, and go to state 83
    DIV        shift, and go to state 84
    PLUS       shift, and go to state 85

    $default  reduce using rule 52 (assignexpr)


State 169

   66 normcall: START_PARENTHESIS elist . END_PARENTHESIS

    END_PARENTHESIS  shift, and go to state 186


State 170

   67 methodcall: DOUBLE_DOT ID . START_PARENTHESIS elist END_PARENTHESIS

    START_PARENTHESIS  shift, and go to state 187


State 171

   59 member: call START_BRACKET expr END_BRACKET .

    $default  reduce using rule 59 (member)


State 172

   60 call: call START_PARENTHESIS elist END_PARENTHESIS .

    $default  reduce using rule 60 (call)


State 173

   58 member: call DOT $@7 ID .

    $default  reduce using rule 58 (member)


State 174

  105 ifstmt: ifprefix stmt elseprefix stmt .

    $default  reduce using rule 105 (ifstmt)


State 175

  108 whilecond: START_PARENTHESIS expr END_PARENTHESIS .

    $default  reduce using rule 108 (whilecond)


State 176

  114 forstmt: forprefix N elist END_PARENTHESIS . N stmt N

    $default  reduce using rule 110 (N)

    N  go to state 188


State 177

  113 forprefix: FOR $@20 START_PARENTHESIS elist SEMICOLON . M expr SEMICOLON

    $default  reduce using rule 111 (M)

    M  go to state 189


State 178

   98 idlist: ID . $@18 commaid

    $default  reduce using rule 97 ($@18)

    $@18  go to state 190


State 179

   85 funcdef: FUNCTION $@11 START_PARENTHESIS $@12 idlist . END_PARENTHESIS $@13 block

    END_PARENTHESIS  shift, and go to state 191


State 180

   90 funcdef: FUNCTION $@14 ID $@15 START_PARENTHESIS . $@16 idlist END_PARENTHESIS $@17 block

    $default  reduce using rule 88 ($@16)

    $@16  go to state 192


State 181

   81 block: CURLY_START_BRACKET $@10 stmt program CURLY_END_BRACKET .

    $default  reduce using rule 81 (block)


State 182

   17 expr: expr . PLUS expr
   18     | expr . MINUS expr
   19     | expr . MULTIPLY expr
   20     | expr . DIV expr
   21     | expr . MOD expr
   22     | expr . BIGGER expr
   23     | expr . BIGGER_EQ expr
   24     | expr . LESS expr
   25     | expr . LESS_EQ expr
   26     | expr . EQUAL expr
   27     | expr . DIFFER expr
   28     | expr . AND Q expr
   29     | expr . OR Q expr
   77 indexedelem: CURLY_START_BRACKET expr COLON expr . CURLY_END_BRACKET

    AND                shift, and go to state 73
    OR                 shift, and go to state 74
    MINUS              shift, and go to state 75
    EQUAL              shift, and go to state 76
    DIFFER             shift, and go to state 77
    BIGGER             shift, and go to state 78
    LESS               shift, and go to state 79
    BIGGER_EQ          shift, and go to state 80
    LESS_EQ            shift, and go to state 81
    MOD                shift, and go to state 82
    MULTIPLY           shift, and go to state 83
    DIV                shift, and go to state 84
    PLUS               shift, and go to state 85
    CURLY_END_BRACKET  shift, and go to state 193


State 183

   70 commaexpr: COMMA expr commaexpr .

    $default  reduce using rule 70 (commaexpr)


State 184

   75 commaindexedelem: COMMA indexedelem commaindexedelem .

    $default  reduce using rule 75 (commaindexedelem)


State 185

   63 call: START_PARENTHESIS funcdef END_PARENTHESIS START_PARENTHESIS elist . END_PARENTHESIS

    END_PARENTHESIS  shift, and go to state 194


State 186

   66 normcall: START_PARENTHESIS elist END_PARENTHESIS .

    $default  reduce using rule 66 (normcall)


State 187

   67 methodcall: DOUBLE_DOT ID START_PARENTHESIS . elist END_PARENTHESIS

    STRING             shift, and go to state 1
    INTEGER            shift, and go to state 2
    REAL               shift, and go to state 3
    LOCAL              shift, and go to state 4
    NIL                shift, and go to state 5
    ID                 shift, and go to state 6
    NOT                shift, and go to state 14
    TRUE               shift, and go to state 15
    FALSE              shift, and go to state 16
    MINUS              shift, and go to state 17
    MINUSMINUS         shift, and go to state 18
    PLUSPLUS           shift, and go to state 19
    START_BRACKET      shift, and go to state 21
    START_PARENTHESIS  shift, and go to state 22
    DOUBLE_COLON       shift, and go to state 24

    $default  reduce using rule 69 (elist)

    expr        go to state 64
    term        go to state 29
    primary     go to state 30
    lvalue      go to state 31
    assignexpr  go to state 32
    member      go to state 33
    call        go to state 34
    elist       go to state 195
    objectdef   go to state 35
    const       go to state 38


State 188

  114 forstmt: forprefix N elist END_PARENTHESIS N . stmt N

    STRING               shift, and go to state 1
    INTEGER              shift, and go to state 2
    REAL                 shift, and go to state 3
    LOCAL                shift, and go to state 4
    NIL                  shift, and go to state 5
    ID                   shift, and go to state 6
    IF                   shift, and go to state 7
    WHILE                shift, and go to state 8
    FOR                  shift, and go to state 9
    FUNCTION             shift, and go to state 10
    RETURN               shift, and go to state 11
    BREAK                shift, and go to state 12
    CONTINUE             shift, and go to state 13
    NOT                  shift, and go to state 14
    TRUE                 shift, and go to state 15
    FALSE                shift, and go to state 16
    MINUS                shift, and go to state 17
    MINUSMINUS           shift, and go to state 18
    PLUSPLUS             shift, and go to state 19
    CURLY_START_BRACKET  shift, and go to state 20
    START_BRACKET        shift, and go to state 21
    START_PARENTHESIS    shift, and go to state 22
    SEMICOLON            shift, and go to state 23
    DOUBLE_COLON         shift, and go to state 24

    stmt        go to state 196
    expr        go to state 28
    term        go to state 29
    primary     go to state 30
    lvalue      go to state 31
    assignexpr  go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    block       go to state 36
    funcdef     go to state 37
    const       go to state 38
    ifprefix    go to state 39
    ifstmt      go to state 40
    whilestart  go to state 41
    whilestmt   go to state 42
    forprefix   go to state 43
    forstmt     go to state 44
    returnstmt  go to state 45


State 189

  113 forprefix: FOR $@20 START_PARENTHESIS elist SEMICOLON M . expr SEMICOLON

    STRING             shift, and go to state 1
    INTEGER            shift, and go to state 2
    REAL               shift, and go to state 3
    LOCAL              shift, and go to state 4
    NIL                shift, and go to state 5
    ID                 shift, and go to state 6
    NOT                shift, and go to state 14
    TRUE               shift, and go to state 15
    FALSE              shift, and go to state 16
    MINUS              shift, and go to state 17
    MINUSMINUS         shift, and go to state 18
    PLUSPLUS           shift, and go to state 19
    START_BRACKET      shift, and go to state 21
    START_PARENTHESIS  shift, and go to state 22
    DOUBLE_COLON       shift, and go to state 24

    expr        go to state 197
    term        go to state 29
    primary     go to state 30
    lvalue      go to state 31
    assignexpr  go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 190

   98 idlist: ID $@18 . commaid

    COMMA  shift, and go to state 198

    $default  reduce using rule 102 (commaid)

    commaid  go to state 199


State 191

   85 funcdef: FUNCTION $@11 START_PARENTHESIS $@12 idlist END_PARENTHESIS . $@13 block

    $default  reduce using rule 84 ($@13)

    $@13  go to state 200


State 192

   90 funcdef: FUNCTION $@14 ID $@15 START_PARENTHESIS $@16 . idlist END_PARENTHESIS $@17 block

    ID  shift, and go to state 178

    $default  reduce using rule 99 (idlist)

    idlist  go to state 201


State 193

   77 indexedelem: CURLY_START_BRACKET expr COLON expr CURLY_END_BRACKET .

    $default  reduce using rule 77 (indexedelem)


State 194

   63 call: START_PARENTHESIS funcdef END_PARENTHESIS START_PARENTHESIS elist END_PARENTHESIS .

    $default  reduce using rule 63 (call)


State 195

   67 methodcall: DOUBLE_DOT ID START_PARENTHESIS elist . END_PARENTHESIS

    END_PARENTHESIS  shift, and go to state 202


State 196

  114 forstmt: forprefix N elist END_PARENTHESIS N stmt . N

    $default  reduce using rule 110 (N)

    N  go to state 203


State 197

   17 expr: expr . PLUS expr
   18     | expr . MINUS expr
   19     | expr . MULTIPLY expr
   20     | expr . DIV expr
   21     | expr . MOD expr
   22     | expr . BIGGER expr
   23     | expr . BIGGER_EQ expr
   24     | expr . LESS expr
   25     | expr . LESS_EQ expr
   26     | expr . EQUAL expr
   27     | expr . DIFFER expr
   28     | expr . AND Q expr
   29     | expr . OR Q expr
  113 forprefix: FOR $@20 START_PARENTHESIS elist SEMICOLON M expr . SEMICOLON

    AND        shift, and go to state 73
    OR         shift, and go to state 74
    MINUS      shift, and go to state 75
    EQUAL      shift, and go to state 76
    DIFFER     shift, and go to state 77
    BIGGER     shift, and go to state 78
    LESS       shift, and go to state 79
    BIGGER_EQ  shift, and go to state 80
    LESS_EQ    shift, and go to state 81
    MOD        shift, and go to state 82
    MULTIPLY   shift, and go to state 83
    DIV        shift, and go to state 84
    PLUS       shift, and go to state 85
    SEMICOLON  shift, and go to state 204


State 198

  101 commaid: COMMA . ID $@19 commaid

    ID  shift, and go to state 205


State 199

   98 idlist: ID $@18 commaid .

    $default  reduce using rule 98 (idlist)


State 200

   85 funcdef: FUNCTION $@11 START_PARENTHESIS $@12 idlist END_PARENTHESIS $@13 . block

    CURLY_START_BRACKET  shift, and go to state 20

    block  go to state 206


State 201

   90 funcdef: FUNCTION $@14 ID $@15 START_PARENTHESIS $@16 idlist . END_PARENTHESIS $@17 block

    END_PARENTHESIS  shift, and go to state 207


State 202

   67 methodcall: DOUBLE_DOT ID START_PARENTHESIS elist END_PARENTHESIS .

    $default  reduce using rule 67 (methodcall)


State 203

  114 forstmt: forprefix N elist END_PARENTHESIS N stmt N .

    $default  reduce using rule 114 (forstmt)


State 204

  113 forprefix: FOR $@20 START_PARENTHESIS elist SEMICOLON M expr SEMICOLON .

    $default  reduce using rule 113 (forprefix)


State 205

  101 commaid: COMMA ID . $@19 commaid

    $default  reduce using rule 100 ($@19)

    $@19  go to state 208


State 206

   85 funcdef: FUNCTION $@11 START_PARENTHESIS $@12 idlist END_PARENTHESIS $@13 block .

    $default  reduce using rule 85 (funcdef)


State 207

   90 funcdef: FUNCTION $@14 ID $@15 START_PARENTHESIS $@16 idlist END_PARENTHESIS . $@17 block

    $default  reduce using rule 89 ($@17)

    $@17  go to state 209


State 208

  101 commaid: COMMA ID $@19 . commaid

    COMMA  shift, and go to state 198

    $default  reduce using rule 102 (commaid)

    commaid  go to state 210


State 209

   90 funcdef: FUNCTION $@14 ID $@15 START_PARENTHESIS $@16 idlist END_PARENTHESIS $@17 . block

    CURLY_START_BRACKET  shift, and go to state 20

    block  go to state 211


State 210

  101 commaid: COMMA ID $@19 commaid .

    $default  reduce using rule 101 (commaid)


State 211

   90 funcdef: FUNCTION $@14 ID $@15 START_PARENTHESIS $@16 idlist END_PARENTHESIS $@17 block .

    $default  reduce using rule 90 (funcdef)
