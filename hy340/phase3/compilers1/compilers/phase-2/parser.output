Terminals unused in grammar

   BLOCK_COMMENT
   LINE_COMMENT
   ESCAPE_CHARACTERS
   SPACE
   UNDEFINED


State 162 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: stmt program
    2        | %empty

    3 stmt: expr SEMICOLON
    4     | ifstmt
    5     | whilestmt
    6     | forstmt
    7     | returnstmt

    8 $@1: %empty

    9 stmt: BREAK $@1 SEMICOLON

   10 $@2: %empty

   11 stmt: CONTINUE $@2 SEMICOLON
   12     | block
   13     | funcdef
   14     | SEMICOLON

   15 expr: assignexpr
   16     | expr PLUS expr
   17     | expr MINUS expr
   18     | expr MULTIPLY expr
   19     | expr DIV expr
   20     | expr MOD expr
   21     | expr BIGGER expr
   22     | expr BIGGER_EQ expr
   23     | expr LESS expr
   24     | expr LESS_EQ expr
   25     | expr EQUAL expr
   26     | expr DIFFER expr
   27     | expr AND expr
   28     | expr OR expr
   29     | term

   30 term: START_PARENTHESIS expr END_PARENTHESIS
   31     | primary
   32     | MINUS expr
   33     | PLUSPLUS lvalue

   34 $@3: %empty

   35 term: lvalue $@3 PLUSPLUS
   36     | MINUSMINUS lvalue

   37 $@4: %empty

   38 term: lvalue $@4 MINUSMINUS
   39     | NOT expr

   40 primary: lvalue
   41        | call
   42        | objectdef
   43        | START_PARENTHESIS funcdef END_PARENTHESIS
   44        | const

   45 lvalue: ID
   46       | LOCAL ID
   47       | DOUBLE_COLON ID
   48       | member

   49 $@5: %empty

   50 assignexpr: lvalue $@5 ASSIGN expr
   51           | call ASSIGN expr

   52 $@6: %empty

   53 member: lvalue DOT $@6 ID
   54       | lvalue START_BRACKET expr END_BRACKET

   55 $@7: %empty

   56 member: call DOT $@7 ID
   57       | call START_BRACKET expr END_BRACKET

   58 call: call START_PARENTHESIS elist END_PARENTHESIS

   59 $@8: %empty

   60 call: lvalue $@8 callsuffix
   61     | START_PARENTHESIS funcdef END_PARENTHESIS START_PARENTHESIS elist END_PARENTHESIS

   62 callsuffix: normcall
   63           | methodcall

   64 normcall: START_PARENTHESIS elist END_PARENTHESIS

   65 methodcall: DOUBLE_DOT ID START_PARENTHESIS elist END_PARENTHESIS

   66 elist: expr commaexpr
   67      | %empty

   68 commaexpr: COMMA expr commaexpr
   69          | %empty

   70 objectdef: START_BRACKET elist END_BRACKET
   71          | START_BRACKET indexed END_BRACKET

   72 indexed: indexedelem commaindexedelem

   73 commaindexedelem: COMMA indexedelem commaindexedelem
   74                 | %empty

   75 indexedelem: CURLY_START_BRACKET expr COLON expr CURLY_END_BRACKET

   76 $@9: %empty

   77 block: CURLY_START_BRACKET $@9 CURLY_END_BRACKET

   78 $@10: %empty

   79 block: CURLY_START_BRACKET $@10 stmt program CURLY_END_BRACKET

   80 $@11: %empty

   81 $@12: %empty

   82 $@13: %empty

   83 funcdef: FUNCTION $@11 START_PARENTHESIS $@12 idlist END_PARENTHESIS $@13 block

   84 $@14: %empty

   85 $@15: %empty

   86 $@16: %empty

   87 $@17: %empty

   88 funcdef: FUNCTION $@14 ID $@15 START_PARENTHESIS $@16 idlist END_PARENTHESIS $@17 block

   89 const: REAL
   90      | INTEGER
   91      | STRING
   92      | NIL
   93      | TRUE
   94      | FALSE

   95 $@18: %empty

   96 idlist: ID $@18 commaid
   97       | %empty

   98 $@19: %empty

   99 commaid: COMMA ID $@19 commaid
  100        | %empty

  101 ifstmt: IF START_PARENTHESIS expr END_PARENTHESIS stmt
  102       | IF START_PARENTHESIS expr END_PARENTHESIS stmt ELSE stmt

  103 $@20: %empty

  104 whilestmt: WHILE $@20 START_PARENTHESIS expr END_PARENTHESIS stmt

  105 $@21: %empty

  106 forstmt: FOR $@21 START_PARENTHESIS elist SEMICOLON expr SEMICOLON elist END_PARENTHESIS stmt

  107 $@22: %empty

  108 returnstmt: RETURN $@22 expr SEMICOLON

  109 $@23: %empty

  110 returnstmt: RETURN $@23 SEMICOLON


Terminals, with rules where they appear

$end (0) 0
error (256)
ASSIGN (258) 50 51
STRING (259) 91
INTEGER (260) 90
REAL (261) 89
LOCAL (262) 46
NIL (263) 92
ID (264) 45 46 47 53 56 65 88 96 99
BLOCK_COMMENT (265)
LINE_COMMENT (266)
ESCAPE_CHARACTERS (267)
SPACE (268)
IF (269) 101 102
ELSE (270) 102
WHILE (271) 104
FOR (272) 106
FUNCTION (273) 83 88
RETURN (274) 108 110
BREAK (275) 9
CONTINUE (276) 11
AND (277) 27
NOT (278) 39
OR (279) 28
TRUE (280) 93
FALSE (281) 94
MINUS (282) 17 32
EQUAL (283) 25
DIFFER (284) 26
BIGGER (285) 21
LESS (286) 23
BIGGER_EQ (287) 22
LESS_EQ (288) 24
MINUSMINUS (289) 36 38
PLUSPLUS (290) 33 35
MOD (291) 20
MULTIPLY (292) 18
DIV (293) 19
PLUS (294) 16
CURLY_START_BRACKET (295) 75 77 79
CURLY_END_BRACKET (296) 75 77 79
START_BRACKET (297) 54 57 70 71
END_BRACKET (298) 54 57 70 71
START_PARENTHESIS (299) 30 43 58 61 64 65 83 88 101 102 104 106
END_PARENTHESIS (300) 30 43 58 61 64 65 83 88 101 102 104 106
SEMICOLON (301) 3 9 11 14 106 108 110
COMMA (302) 68 73 99
COLON (303) 75
DOUBLE_COLON (304) 47
DOT (305) 53 56
DOUBLE_DOT (306) 65
UNDEFINED (307)
UMINUS (308)


Nonterminals, with rules where they appear

$accept (54)
    on left: 0
program (55)
    on left: 1 2, on right: 0 1 79
stmt (56)
    on left: 3 4 5 6 7 9 11 12 13 14, on right: 1 79 101 102 104 106
$@1 (57)
    on left: 8, on right: 9
$@2 (58)
    on left: 10, on right: 11
expr (59)
    on left: 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29, on right:
    3 16 17 18 19 20 21 22 23 24 25 26 27 28 30 32 39 50 51 54 57 66
    68 75 101 102 104 106 108
term (60)
    on left: 30 31 32 33 35 36 38 39, on right: 29
$@3 (61)
    on left: 34, on right: 35
$@4 (62)
    on left: 37, on right: 38
primary (63)
    on left: 40 41 42 43 44, on right: 31
lvalue (64)
    on left: 45 46 47 48, on right: 33 35 36 38 40 50 53 54 60
assignexpr (65)
    on left: 50 51, on right: 15
$@5 (66)
    on left: 49, on right: 50
member (67)
    on left: 53 54 56 57, on right: 48
$@6 (68)
    on left: 52, on right: 53
$@7 (69)
    on left: 55, on right: 56
call (70)
    on left: 58 60 61, on right: 41 51 56 57 58
$@8 (71)
    on left: 59, on right: 60
callsuffix (72)
    on left: 62 63, on right: 60
normcall (73)
    on left: 64, on right: 62
methodcall (74)
    on left: 65, on right: 63
elist (75)
    on left: 66 67, on right: 58 61 64 65 70 106
commaexpr (76)
    on left: 68 69, on right: 66 68
objectdef (77)
    on left: 70 71, on right: 42
indexed (78)
    on left: 72, on right: 71
commaindexedelem (79)
    on left: 73 74, on right: 72 73
indexedelem (80)
    on left: 75, on right: 72 73
block (81)
    on left: 77 79, on right: 12 83 88
$@9 (82)
    on left: 76, on right: 77
$@10 (83)
    on left: 78, on right: 79
funcdef (84)
    on left: 83 88, on right: 13 43 61
$@11 (85)
    on left: 80, on right: 83
$@12 (86)
    on left: 81, on right: 83
$@13 (87)
    on left: 82, on right: 83
$@14 (88)
    on left: 84, on right: 88
$@15 (89)
    on left: 85, on right: 88
$@16 (90)
    on left: 86, on right: 88
$@17 (91)
    on left: 87, on right: 88
const (92)
    on left: 89 90 91 92 93 94, on right: 44
idlist (93)
    on left: 96 97, on right: 83 88
$@18 (94)
    on left: 95, on right: 96
commaid (95)
    on left: 99 100, on right: 96 99
$@19 (96)
    on left: 98, on right: 99
ifstmt (97)
    on left: 101 102, on right: 4
whilestmt (98)
    on left: 104, on right: 5
$@20 (99)
    on left: 103, on right: 104
forstmt (100)
    on left: 106, on right: 6
$@21 (101)
    on left: 105, on right: 106
returnstmt (102)
    on left: 108 110, on right: 7
$@22 (103)
    on left: 107, on right: 108
$@23 (104)
    on left: 109, on right: 110


State 0

    0 $accept: . program $end

    STRING               shift, and go to state 1
    INTEGER              shift, and go to state 2
    REAL                 shift, and go to state 3
    LOCAL                shift, and go to state 4
    NIL                  shift, and go to state 5
    ID                   shift, and go to state 6
    IF                   shift, and go to state 7
    WHILE                shift, and go to state 8
    FOR                  shift, and go to state 9
    FUNCTION             shift, and go to state 10
    RETURN               shift, and go to state 11
    BREAK                shift, and go to state 12
    CONTINUE             shift, and go to state 13
    NOT                  shift, and go to state 14
    TRUE                 shift, and go to state 15
    FALSE                shift, and go to state 16
    MINUS                shift, and go to state 17
    MINUSMINUS           shift, and go to state 18
    PLUSPLUS             shift, and go to state 19
    CURLY_START_BRACKET  shift, and go to state 20
    START_BRACKET        shift, and go to state 21
    START_PARENTHESIS    shift, and go to state 22
    SEMICOLON            shift, and go to state 23
    DOUBLE_COLON         shift, and go to state 24

    $default  reduce using rule 2 (program)

    program     go to state 25
    stmt        go to state 26
    expr        go to state 27
    term        go to state 28
    primary     go to state 29
    lvalue      go to state 30
    assignexpr  go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    block       go to state 35
    funcdef     go to state 36
    const       go to state 37
    ifstmt      go to state 38
    whilestmt   go to state 39
    forstmt     go to state 40
    returnstmt  go to state 41


State 1

   91 const: STRING .

    $default  reduce using rule 91 (const)


State 2

   90 const: INTEGER .

    $default  reduce using rule 90 (const)


State 3

   89 const: REAL .

    $default  reduce using rule 89 (const)


State 4

   46 lvalue: LOCAL . ID

    ID  shift, and go to state 42


State 5

   92 const: NIL .

    $default  reduce using rule 92 (const)


State 6

   45 lvalue: ID .

    $default  reduce using rule 45 (lvalue)


State 7

  101 ifstmt: IF . START_PARENTHESIS expr END_PARENTHESIS stmt
  102       | IF . START_PARENTHESIS expr END_PARENTHESIS stmt ELSE stmt

    START_PARENTHESIS  shift, and go to state 43


State 8

  104 whilestmt: WHILE . $@20 START_PARENTHESIS expr END_PARENTHESIS stmt

    $default  reduce using rule 103 ($@20)

    $@20  go to state 44


State 9

  106 forstmt: FOR . $@21 START_PARENTHESIS elist SEMICOLON expr SEMICOLON elist END_PARENTHESIS stmt

    $default  reduce using rule 105 ($@21)

    $@21  go to state 45


State 10

   83 funcdef: FUNCTION . $@11 START_PARENTHESIS $@12 idlist END_PARENTHESIS $@13 block
   88        | FUNCTION . $@14 ID $@15 START_PARENTHESIS $@16 idlist END_PARENTHESIS $@17 block

    ID        reduce using rule 84 ($@14)
    $default  reduce using rule 80 ($@11)

    $@11  go to state 46
    $@14  go to state 47


State 11

  108 returnstmt: RETURN . $@22 expr SEMICOLON
  110           | RETURN . $@23 SEMICOLON

    SEMICOLON  reduce using rule 109 ($@23)
    $default   reduce using rule 107 ($@22)

    $@22  go to state 48
    $@23  go to state 49


State 12

    9 stmt: BREAK . $@1 SEMICOLON

    $default  reduce using rule 8 ($@1)

    $@1  go to state 50


State 13

   11 stmt: CONTINUE . $@2 SEMICOLON

    $default  reduce using rule 10 ($@2)

    $@2  go to state 51


State 14

   39 term: NOT . expr

    STRING             shift, and go to state 1
    INTEGER            shift, and go to state 2
    REAL               shift, and go to state 3
    LOCAL              shift, and go to state 4
    NIL                shift, and go to state 5
    ID                 shift, and go to state 6
    NOT                shift, and go to state 14
    TRUE               shift, and go to state 15
    FALSE              shift, and go to state 16
    MINUS              shift, and go to state 17
    MINUSMINUS         shift, and go to state 18
    PLUSPLUS           shift, and go to state 19
    START_BRACKET      shift, and go to state 21
    START_PARENTHESIS  shift, and go to state 22
    DOUBLE_COLON       shift, and go to state 24

    expr        go to state 52
    term        go to state 28
    primary     go to state 29
    lvalue      go to state 30
    assignexpr  go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 15

   93 const: TRUE .

    $default  reduce using rule 93 (const)


State 16

   94 const: FALSE .

    $default  reduce using rule 94 (const)


State 17

   32 term: MINUS . expr

    STRING             shift, and go to state 1
    INTEGER            shift, and go to state 2
    REAL               shift, and go to state 3
    LOCAL              shift, and go to state 4
    NIL                shift, and go to state 5
    ID                 shift, and go to state 6
    NOT                shift, and go to state 14
    TRUE               shift, and go to state 15
    FALSE              shift, and go to state 16
    MINUS              shift, and go to state 17
    MINUSMINUS         shift, and go to state 18
    PLUSPLUS           shift, and go to state 19
    START_BRACKET      shift, and go to state 21
    START_PARENTHESIS  shift, and go to state 22
    DOUBLE_COLON       shift, and go to state 24

    expr        go to state 53
    term        go to state 28
    primary     go to state 29
    lvalue      go to state 30
    assignexpr  go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 18

   36 term: MINUSMINUS . lvalue

    LOCAL              shift, and go to state 4
    ID                 shift, and go to state 6
    START_PARENTHESIS  shift, and go to state 54
    DOUBLE_COLON       shift, and go to state 24

    lvalue  go to state 55
    member  go to state 32
    call    go to state 56


State 19

   33 term: PLUSPLUS . lvalue

    LOCAL              shift, and go to state 4
    ID                 shift, and go to state 6
    START_PARENTHESIS  shift, and go to state 54
    DOUBLE_COLON       shift, and go to state 24

    lvalue  go to state 57
    member  go to state 32
    call    go to state 56


State 20

   77 block: CURLY_START_BRACKET . $@9 CURLY_END_BRACKET
   79      | CURLY_START_BRACKET . $@10 stmt program CURLY_END_BRACKET

    CURLY_END_BRACKET  reduce using rule 76 ($@9)
    $default           reduce using rule 78 ($@10)

    $@9   go to state 58
    $@10  go to state 59


State 21

   70 objectdef: START_BRACKET . elist END_BRACKET
   71          | START_BRACKET . indexed END_BRACKET

    STRING               shift, and go to state 1
    INTEGER              shift, and go to state 2
    REAL                 shift, and go to state 3
    LOCAL                shift, and go to state 4
    NIL                  shift, and go to state 5
    ID                   shift, and go to state 6
    NOT                  shift, and go to state 14
    TRUE                 shift, and go to state 15
    FALSE                shift, and go to state 16
    MINUS                shift, and go to state 17
    MINUSMINUS           shift, and go to state 18
    PLUSPLUS             shift, and go to state 19
    CURLY_START_BRACKET  shift, and go to state 60
    START_BRACKET        shift, and go to state 21
    START_PARENTHESIS    shift, and go to state 22
    DOUBLE_COLON         shift, and go to state 24

    $default  reduce using rule 67 (elist)

    expr         go to state 61
    term         go to state 28
    primary      go to state 29
    lvalue       go to state 30
    assignexpr   go to state 31
    member       go to state 32
    call         go to state 33
    elist        go to state 62
    objectdef    go to state 34
    indexed      go to state 63
    indexedelem  go to state 64
    const        go to state 37


State 22

   30 term: START_PARENTHESIS . expr END_PARENTHESIS
   43 primary: START_PARENTHESIS . funcdef END_PARENTHESIS
   61 call: START_PARENTHESIS . funcdef END_PARENTHESIS START_PARENTHESIS elist END_PARENTHESIS

    STRING             shift, and go to state 1
    INTEGER            shift, and go to state 2
    REAL               shift, and go to state 3
    LOCAL              shift, and go to state 4
    NIL                shift, and go to state 5
    ID                 shift, and go to state 6
    FUNCTION           shift, and go to state 10
    NOT                shift, and go to state 14
    TRUE               shift, and go to state 15
    FALSE              shift, and go to state 16
    MINUS              shift, and go to state 17
    MINUSMINUS         shift, and go to state 18
    PLUSPLUS           shift, and go to state 19
    START_BRACKET      shift, and go to state 21
    START_PARENTHESIS  shift, and go to state 22
    DOUBLE_COLON       shift, and go to state 24

    expr        go to state 65
    term        go to state 28
    primary     go to state 29
    lvalue      go to state 30
    assignexpr  go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    funcdef     go to state 66
    const       go to state 37


State 23

   14 stmt: SEMICOLON .

    $default  reduce using rule 14 (stmt)


State 24

   47 lvalue: DOUBLE_COLON . ID

    ID  shift, and go to state 67


State 25

    0 $accept: program . $end

    $end  shift, and go to state 68


State 26

    1 program: stmt . program

    STRING               shift, and go to state 1
    INTEGER              shift, and go to state 2
    REAL                 shift, and go to state 3
    LOCAL                shift, and go to state 4
    NIL                  shift, and go to state 5
    ID                   shift, and go to state 6
    IF                   shift, and go to state 7
    WHILE                shift, and go to state 8
    FOR                  shift, and go to state 9
    FUNCTION             shift, and go to state 10
    RETURN               shift, and go to state 11
    BREAK                shift, and go to state 12
    CONTINUE             shift, and go to state 13
    NOT                  shift, and go to state 14
    TRUE                 shift, and go to state 15
    FALSE                shift, and go to state 16
    MINUS                shift, and go to state 17
    MINUSMINUS           shift, and go to state 18
    PLUSPLUS             shift, and go to state 19
    CURLY_START_BRACKET  shift, and go to state 20
    START_BRACKET        shift, and go to state 21
    START_PARENTHESIS    shift, and go to state 22
    SEMICOLON            shift, and go to state 23
    DOUBLE_COLON         shift, and go to state 24

    $default  reduce using rule 2 (program)

    program     go to state 69
    stmt        go to state 26
    expr        go to state 27
    term        go to state 28
    primary     go to state 29
    lvalue      go to state 30
    assignexpr  go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    block       go to state 35
    funcdef     go to state 36
    const       go to state 37
    ifstmt      go to state 38
    whilestmt   go to state 39
    forstmt     go to state 40
    returnstmt  go to state 41


State 27

    3 stmt: expr . SEMICOLON
   16 expr: expr . PLUS expr
   17     | expr . MINUS expr
   18     | expr . MULTIPLY expr
   19     | expr . DIV expr
   20     | expr . MOD expr
   21     | expr . BIGGER expr
   22     | expr . BIGGER_EQ expr
   23     | expr . LESS expr
   24     | expr . LESS_EQ expr
   25     | expr . EQUAL expr
   26     | expr . DIFFER expr
   27     | expr . AND expr
   28     | expr . OR expr

    AND        shift, and go to state 70
    OR         shift, and go to state 71
    MINUS      shift, and go to state 72
    EQUAL      shift, and go to state 73
    DIFFER     shift, and go to state 74
    BIGGER     shift, and go to state 75
    LESS       shift, and go to state 76
    BIGGER_EQ  shift, and go to state 77
    LESS_EQ    shift, and go to state 78
    MOD        shift, and go to state 79
    MULTIPLY   shift, and go to state 80
    DIV        shift, and go to state 81
    PLUS       shift, and go to state 82
    SEMICOLON  shift, and go to state 83


State 28

   29 expr: term .

    $default  reduce using rule 29 (expr)


State 29

   31 term: primary .

    $default  reduce using rule 31 (term)


State 30

   35 term: lvalue . $@3 PLUSPLUS
   38     | lvalue . $@4 MINUSMINUS
   40 primary: lvalue .
   50 assignexpr: lvalue . $@5 ASSIGN expr
   53 member: lvalue . DOT $@6 ID
   54       | lvalue . START_BRACKET expr END_BRACKET
   60 call: lvalue . $@8 callsuffix

    START_BRACKET  shift, and go to state 84
    DOT            shift, and go to state 85

    ASSIGN             reduce using rule 49 ($@5)
    MINUSMINUS         reduce using rule 37 ($@4)
    PLUSPLUS           reduce using rule 34 ($@3)
    START_PARENTHESIS  reduce using rule 59 ($@8)
    DOUBLE_DOT         reduce using rule 59 ($@8)
    $default           reduce using rule 40 (primary)

    $@3  go to state 86
    $@4  go to state 87
    $@5  go to state 88
    $@8  go to state 89


State 31

   15 expr: assignexpr .

    $default  reduce using rule 15 (expr)


State 32

   48 lvalue: member .

    $default  reduce using rule 48 (lvalue)


State 33

   41 primary: call .
   51 assignexpr: call . ASSIGN expr
   56 member: call . DOT $@7 ID
   57       | call . START_BRACKET expr END_BRACKET
   58 call: call . START_PARENTHESIS elist END_PARENTHESIS

    ASSIGN             shift, and go to state 90
    START_BRACKET      shift, and go to state 91
    START_PARENTHESIS  shift, and go to state 92
    DOT                shift, and go to state 93

    $default  reduce using rule 41 (primary)


State 34

   42 primary: objectdef .

    $default  reduce using rule 42 (primary)


State 35

   12 stmt: block .

    $default  reduce using rule 12 (stmt)


State 36

   13 stmt: funcdef .

    $default  reduce using rule 13 (stmt)


State 37

   44 primary: const .

    $default  reduce using rule 44 (primary)


State 38

    4 stmt: ifstmt .

    $default  reduce using rule 4 (stmt)


State 39

    5 stmt: whilestmt .

    $default  reduce using rule 5 (stmt)


State 40

    6 stmt: forstmt .

    $default  reduce using rule 6 (stmt)


State 41

    7 stmt: returnstmt .

    $default  reduce using rule 7 (stmt)


State 42

   46 lvalue: LOCAL ID .

    $default  reduce using rule 46 (lvalue)


State 43

  101 ifstmt: IF START_PARENTHESIS . expr END_PARENTHESIS stmt
  102       | IF START_PARENTHESIS . expr END_PARENTHESIS stmt ELSE stmt

    STRING             shift, and go to state 1
    INTEGER            shift, and go to state 2
    REAL               shift, and go to state 3
    LOCAL              shift, and go to state 4
    NIL                shift, and go to state 5
    ID                 shift, and go to state 6
    NOT                shift, and go to state 14
    TRUE               shift, and go to state 15
    FALSE              shift, and go to state 16
    MINUS              shift, and go to state 17
    MINUSMINUS         shift, and go to state 18
    PLUSPLUS           shift, and go to state 19
    START_BRACKET      shift, and go to state 21
    START_PARENTHESIS  shift, and go to state 22
    DOUBLE_COLON       shift, and go to state 24

    expr        go to state 94
    term        go to state 28
    primary     go to state 29
    lvalue      go to state 30
    assignexpr  go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 44

  104 whilestmt: WHILE $@20 . START_PARENTHESIS expr END_PARENTHESIS stmt

    START_PARENTHESIS  shift, and go to state 95


State 45

  106 forstmt: FOR $@21 . START_PARENTHESIS elist SEMICOLON expr SEMICOLON elist END_PARENTHESIS stmt

    START_PARENTHESIS  shift, and go to state 96


State 46

   83 funcdef: FUNCTION $@11 . START_PARENTHESIS $@12 idlist END_PARENTHESIS $@13 block

    START_PARENTHESIS  shift, and go to state 97


State 47

   88 funcdef: FUNCTION $@14 . ID $@15 START_PARENTHESIS $@16 idlist END_PARENTHESIS $@17 block

    ID  shift, and go to state 98


State 48

  108 returnstmt: RETURN $@22 . expr SEMICOLON

    STRING             shift, and go to state 1
    INTEGER            shift, and go to state 2
    REAL               shift, and go to state 3
    LOCAL              shift, and go to state 4
    NIL                shift, and go to state 5
    ID                 shift, and go to state 6
    NOT                shift, and go to state 14
    TRUE               shift, and go to state 15
    FALSE              shift, and go to state 16
    MINUS              shift, and go to state 17
    MINUSMINUS         shift, and go to state 18
    PLUSPLUS           shift, and go to state 19
    START_BRACKET      shift, and go to state 21
    START_PARENTHESIS  shift, and go to state 22
    DOUBLE_COLON       shift, and go to state 24

    expr        go to state 99
    term        go to state 28
    primary     go to state 29
    lvalue      go to state 30
    assignexpr  go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 49

  110 returnstmt: RETURN $@23 . SEMICOLON

    SEMICOLON  shift, and go to state 100


State 50

    9 stmt: BREAK $@1 . SEMICOLON

    SEMICOLON  shift, and go to state 101


State 51

   11 stmt: CONTINUE $@2 . SEMICOLON

    SEMICOLON  shift, and go to state 102


State 52

   16 expr: expr . PLUS expr
   17     | expr . MINUS expr
   18     | expr . MULTIPLY expr
   19     | expr . DIV expr
   20     | expr . MOD expr
   21     | expr . BIGGER expr
   22     | expr . BIGGER_EQ expr
   23     | expr . LESS expr
   24     | expr . LESS_EQ expr
   25     | expr . EQUAL expr
   26     | expr . DIFFER expr
   27     | expr . AND expr
   28     | expr . OR expr
   39 term: NOT expr .

    $default  reduce using rule 39 (term)


State 53

   16 expr: expr . PLUS expr
   17     | expr . MINUS expr
   18     | expr . MULTIPLY expr
   19     | expr . DIV expr
   20     | expr . MOD expr
   21     | expr . BIGGER expr
   22     | expr . BIGGER_EQ expr
   23     | expr . LESS expr
   24     | expr . LESS_EQ expr
   25     | expr . EQUAL expr
   26     | expr . DIFFER expr
   27     | expr . AND expr
   28     | expr . OR expr
   32 term: MINUS expr .

    $default  reduce using rule 32 (term)


State 54

   61 call: START_PARENTHESIS . funcdef END_PARENTHESIS START_PARENTHESIS elist END_PARENTHESIS

    FUNCTION  shift, and go to state 10

    funcdef  go to state 103


State 55

   36 term: MINUSMINUS lvalue .
   53 member: lvalue . DOT $@6 ID
   54       | lvalue . START_BRACKET expr END_BRACKET
   60 call: lvalue . $@8 callsuffix

    START_BRACKET  shift, and go to state 84
    DOT            shift, and go to state 85

    START_PARENTHESIS  reduce using rule 59 ($@8)
    DOUBLE_DOT         reduce using rule 59 ($@8)
    $default           reduce using rule 36 (term)

    $@8  go to state 89


State 56

   56 member: call . DOT $@7 ID
   57       | call . START_BRACKET expr END_BRACKET
   58 call: call . START_PARENTHESIS elist END_PARENTHESIS

    START_BRACKET      shift, and go to state 91
    START_PARENTHESIS  shift, and go to state 92
    DOT                shift, and go to state 93


State 57

   33 term: PLUSPLUS lvalue .
   53 member: lvalue . DOT $@6 ID
   54       | lvalue . START_BRACKET expr END_BRACKET
   60 call: lvalue . $@8 callsuffix

    START_BRACKET  shift, and go to state 84
    DOT            shift, and go to state 85

    START_PARENTHESIS  reduce using rule 59 ($@8)
    DOUBLE_DOT         reduce using rule 59 ($@8)
    $default           reduce using rule 33 (term)

    $@8  go to state 89


State 58

   77 block: CURLY_START_BRACKET $@9 . CURLY_END_BRACKET

    CURLY_END_BRACKET  shift, and go to state 104


State 59

   79 block: CURLY_START_BRACKET $@10 . stmt program CURLY_END_BRACKET

    STRING               shift, and go to state 1
    INTEGER              shift, and go to state 2
    REAL                 shift, and go to state 3
    LOCAL                shift, and go to state 4
    NIL                  shift, and go to state 5
    ID                   shift, and go to state 6
    IF                   shift, and go to state 7
    WHILE                shift, and go to state 8
    FOR                  shift, and go to state 9
    FUNCTION             shift, and go to state 10
    RETURN               shift, and go to state 11
    BREAK                shift, and go to state 12
    CONTINUE             shift, and go to state 13
    NOT                  shift, and go to state 14
    TRUE                 shift, and go to state 15
    FALSE                shift, and go to state 16
    MINUS                shift, and go to state 17
    MINUSMINUS           shift, and go to state 18
    PLUSPLUS             shift, and go to state 19
    CURLY_START_BRACKET  shift, and go to state 20
    START_BRACKET        shift, and go to state 21
    START_PARENTHESIS    shift, and go to state 22
    SEMICOLON            shift, and go to state 23
    DOUBLE_COLON         shift, and go to state 24

    stmt        go to state 105
    expr        go to state 27
    term        go to state 28
    primary     go to state 29
    lvalue      go to state 30
    assignexpr  go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    block       go to state 35
    funcdef     go to state 36
    const       go to state 37
    ifstmt      go to state 38
    whilestmt   go to state 39
    forstmt     go to state 40
    returnstmt  go to state 41


State 60

   75 indexedelem: CURLY_START_BRACKET . expr COLON expr CURLY_END_BRACKET

    STRING             shift, and go to state 1
    INTEGER            shift, and go to state 2
    REAL               shift, and go to state 3
    LOCAL              shift, and go to state 4
    NIL                shift, and go to state 5
    ID                 shift, and go to state 6
    NOT                shift, and go to state 14
    TRUE               shift, and go to state 15
    FALSE              shift, and go to state 16
    MINUS              shift, and go to state 17
    MINUSMINUS         shift, and go to state 18
    PLUSPLUS           shift, and go to state 19
    START_BRACKET      shift, and go to state 21
    START_PARENTHESIS  shift, and go to state 22
    DOUBLE_COLON       shift, and go to state 24

    expr        go to state 106
    term        go to state 28
    primary     go to state 29
    lvalue      go to state 30
    assignexpr  go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 61

   16 expr: expr . PLUS expr
   17     | expr . MINUS expr
   18     | expr . MULTIPLY expr
   19     | expr . DIV expr
   20     | expr . MOD expr
   21     | expr . BIGGER expr
   22     | expr . BIGGER_EQ expr
   23     | expr . LESS expr
   24     | expr . LESS_EQ expr
   25     | expr . EQUAL expr
   26     | expr . DIFFER expr
   27     | expr . AND expr
   28     | expr . OR expr
   66 elist: expr . commaexpr

    AND        shift, and go to state 70
    OR         shift, and go to state 71
    MINUS      shift, and go to state 72
    EQUAL      shift, and go to state 73
    DIFFER     shift, and go to state 74
    BIGGER     shift, and go to state 75
    LESS       shift, and go to state 76
    BIGGER_EQ  shift, and go to state 77
    LESS_EQ    shift, and go to state 78
    MOD        shift, and go to state 79
    MULTIPLY   shift, and go to state 80
    DIV        shift, and go to state 81
    PLUS       shift, and go to state 82
    COMMA      shift, and go to state 107

    $default  reduce using rule 69 (commaexpr)

    commaexpr  go to state 108


State 62

   70 objectdef: START_BRACKET elist . END_BRACKET

    END_BRACKET  shift, and go to state 109


State 63

   71 objectdef: START_BRACKET indexed . END_BRACKET

    END_BRACKET  shift, and go to state 110


State 64

   72 indexed: indexedelem . commaindexedelem

    COMMA  shift, and go to state 111

    $default  reduce using rule 74 (commaindexedelem)

    commaindexedelem  go to state 112


State 65

   16 expr: expr . PLUS expr
   17     | expr . MINUS expr
   18     | expr . MULTIPLY expr
   19     | expr . DIV expr
   20     | expr . MOD expr
   21     | expr . BIGGER expr
   22     | expr . BIGGER_EQ expr
   23     | expr . LESS expr
   24     | expr . LESS_EQ expr
   25     | expr . EQUAL expr
   26     | expr . DIFFER expr
   27     | expr . AND expr
   28     | expr . OR expr
   30 term: START_PARENTHESIS expr . END_PARENTHESIS

    AND              shift, and go to state 70
    OR               shift, and go to state 71
    MINUS            shift, and go to state 72
    EQUAL            shift, and go to state 73
    DIFFER           shift, and go to state 74
    BIGGER           shift, and go to state 75
    LESS             shift, and go to state 76
    BIGGER_EQ        shift, and go to state 77
    LESS_EQ          shift, and go to state 78
    MOD              shift, and go to state 79
    MULTIPLY         shift, and go to state 80
    DIV              shift, and go to state 81
    PLUS             shift, and go to state 82
    END_PARENTHESIS  shift, and go to state 113


State 66

   43 primary: START_PARENTHESIS funcdef . END_PARENTHESIS
   61 call: START_PARENTHESIS funcdef . END_PARENTHESIS START_PARENTHESIS elist END_PARENTHESIS

    END_PARENTHESIS  shift, and go to state 114


State 67

   47 lvalue: DOUBLE_COLON ID .

    $default  reduce using rule 47 (lvalue)


State 68

    0 $accept: program $end .

    $default  accept


State 69

    1 program: stmt program .

    $default  reduce using rule 1 (program)


State 70

   27 expr: expr AND . expr

    STRING             shift, and go to state 1
    INTEGER            shift, and go to state 2
    REAL               shift, and go to state 3
    LOCAL              shift, and go to state 4
    NIL                shift, and go to state 5
    ID                 shift, and go to state 6
    NOT                shift, and go to state 14
    TRUE               shift, and go to state 15
    FALSE              shift, and go to state 16
    MINUS              shift, and go to state 17
    MINUSMINUS         shift, and go to state 18
    PLUSPLUS           shift, and go to state 19
    START_BRACKET      shift, and go to state 21
    START_PARENTHESIS  shift, and go to state 22
    DOUBLE_COLON       shift, and go to state 24

    expr        go to state 115
    term        go to state 28
    primary     go to state 29
    lvalue      go to state 30
    assignexpr  go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 71

   28 expr: expr OR . expr

    STRING             shift, and go to state 1
    INTEGER            shift, and go to state 2
    REAL               shift, and go to state 3
    LOCAL              shift, and go to state 4
    NIL                shift, and go to state 5
    ID                 shift, and go to state 6
    NOT                shift, and go to state 14
    TRUE               shift, and go to state 15
    FALSE              shift, and go to state 16
    MINUS              shift, and go to state 17
    MINUSMINUS         shift, and go to state 18
    PLUSPLUS           shift, and go to state 19
    START_BRACKET      shift, and go to state 21
    START_PARENTHESIS  shift, and go to state 22
    DOUBLE_COLON       shift, and go to state 24

    expr        go to state 116
    term        go to state 28
    primary     go to state 29
    lvalue      go to state 30
    assignexpr  go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 72

   17 expr: expr MINUS . expr

    STRING             shift, and go to state 1
    INTEGER            shift, and go to state 2
    REAL               shift, and go to state 3
    LOCAL              shift, and go to state 4
    NIL                shift, and go to state 5
    ID                 shift, and go to state 6
    NOT                shift, and go to state 14
    TRUE               shift, and go to state 15
    FALSE              shift, and go to state 16
    MINUS              shift, and go to state 17
    MINUSMINUS         shift, and go to state 18
    PLUSPLUS           shift, and go to state 19
    START_BRACKET      shift, and go to state 21
    START_PARENTHESIS  shift, and go to state 22
    DOUBLE_COLON       shift, and go to state 24

    expr        go to state 117
    term        go to state 28
    primary     go to state 29
    lvalue      go to state 30
    assignexpr  go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 73

   25 expr: expr EQUAL . expr

    STRING             shift, and go to state 1
    INTEGER            shift, and go to state 2
    REAL               shift, and go to state 3
    LOCAL              shift, and go to state 4
    NIL                shift, and go to state 5
    ID                 shift, and go to state 6
    NOT                shift, and go to state 14
    TRUE               shift, and go to state 15
    FALSE              shift, and go to state 16
    MINUS              shift, and go to state 17
    MINUSMINUS         shift, and go to state 18
    PLUSPLUS           shift, and go to state 19
    START_BRACKET      shift, and go to state 21
    START_PARENTHESIS  shift, and go to state 22
    DOUBLE_COLON       shift, and go to state 24

    expr        go to state 118
    term        go to state 28
    primary     go to state 29
    lvalue      go to state 30
    assignexpr  go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 74

   26 expr: expr DIFFER . expr

    STRING             shift, and go to state 1
    INTEGER            shift, and go to state 2
    REAL               shift, and go to state 3
    LOCAL              shift, and go to state 4
    NIL                shift, and go to state 5
    ID                 shift, and go to state 6
    NOT                shift, and go to state 14
    TRUE               shift, and go to state 15
    FALSE              shift, and go to state 16
    MINUS              shift, and go to state 17
    MINUSMINUS         shift, and go to state 18
    PLUSPLUS           shift, and go to state 19
    START_BRACKET      shift, and go to state 21
    START_PARENTHESIS  shift, and go to state 22
    DOUBLE_COLON       shift, and go to state 24

    expr        go to state 119
    term        go to state 28
    primary     go to state 29
    lvalue      go to state 30
    assignexpr  go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 75

   21 expr: expr BIGGER . expr

    STRING             shift, and go to state 1
    INTEGER            shift, and go to state 2
    REAL               shift, and go to state 3
    LOCAL              shift, and go to state 4
    NIL                shift, and go to state 5
    ID                 shift, and go to state 6
    NOT                shift, and go to state 14
    TRUE               shift, and go to state 15
    FALSE              shift, and go to state 16
    MINUS              shift, and go to state 17
    MINUSMINUS         shift, and go to state 18
    PLUSPLUS           shift, and go to state 19
    START_BRACKET      shift, and go to state 21
    START_PARENTHESIS  shift, and go to state 22
    DOUBLE_COLON       shift, and go to state 24

    expr        go to state 120
    term        go to state 28
    primary     go to state 29
    lvalue      go to state 30
    assignexpr  go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 76

   23 expr: expr LESS . expr

    STRING             shift, and go to state 1
    INTEGER            shift, and go to state 2
    REAL               shift, and go to state 3
    LOCAL              shift, and go to state 4
    NIL                shift, and go to state 5
    ID                 shift, and go to state 6
    NOT                shift, and go to state 14
    TRUE               shift, and go to state 15
    FALSE              shift, and go to state 16
    MINUS              shift, and go to state 17
    MINUSMINUS         shift, and go to state 18
    PLUSPLUS           shift, and go to state 19
    START_BRACKET      shift, and go to state 21
    START_PARENTHESIS  shift, and go to state 22
    DOUBLE_COLON       shift, and go to state 24

    expr        go to state 121
    term        go to state 28
    primary     go to state 29
    lvalue      go to state 30
    assignexpr  go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 77

   22 expr: expr BIGGER_EQ . expr

    STRING             shift, and go to state 1
    INTEGER            shift, and go to state 2
    REAL               shift, and go to state 3
    LOCAL              shift, and go to state 4
    NIL                shift, and go to state 5
    ID                 shift, and go to state 6
    NOT                shift, and go to state 14
    TRUE               shift, and go to state 15
    FALSE              shift, and go to state 16
    MINUS              shift, and go to state 17
    MINUSMINUS         shift, and go to state 18
    PLUSPLUS           shift, and go to state 19
    START_BRACKET      shift, and go to state 21
    START_PARENTHESIS  shift, and go to state 22
    DOUBLE_COLON       shift, and go to state 24

    expr        go to state 122
    term        go to state 28
    primary     go to state 29
    lvalue      go to state 30
    assignexpr  go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 78

   24 expr: expr LESS_EQ . expr

    STRING             shift, and go to state 1
    INTEGER            shift, and go to state 2
    REAL               shift, and go to state 3
    LOCAL              shift, and go to state 4
    NIL                shift, and go to state 5
    ID                 shift, and go to state 6
    NOT                shift, and go to state 14
    TRUE               shift, and go to state 15
    FALSE              shift, and go to state 16
    MINUS              shift, and go to state 17
    MINUSMINUS         shift, and go to state 18
    PLUSPLUS           shift, and go to state 19
    START_BRACKET      shift, and go to state 21
    START_PARENTHESIS  shift, and go to state 22
    DOUBLE_COLON       shift, and go to state 24

    expr        go to state 123
    term        go to state 28
    primary     go to state 29
    lvalue      go to state 30
    assignexpr  go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 79

   20 expr: expr MOD . expr

    STRING             shift, and go to state 1
    INTEGER            shift, and go to state 2
    REAL               shift, and go to state 3
    LOCAL              shift, and go to state 4
    NIL                shift, and go to state 5
    ID                 shift, and go to state 6
    NOT                shift, and go to state 14
    TRUE               shift, and go to state 15
    FALSE              shift, and go to state 16
    MINUS              shift, and go to state 17
    MINUSMINUS         shift, and go to state 18
    PLUSPLUS           shift, and go to state 19
    START_BRACKET      shift, and go to state 21
    START_PARENTHESIS  shift, and go to state 22
    DOUBLE_COLON       shift, and go to state 24

    expr        go to state 124
    term        go to state 28
    primary     go to state 29
    lvalue      go to state 30
    assignexpr  go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 80

   18 expr: expr MULTIPLY . expr

    STRING             shift, and go to state 1
    INTEGER            shift, and go to state 2
    REAL               shift, and go to state 3
    LOCAL              shift, and go to state 4
    NIL                shift, and go to state 5
    ID                 shift, and go to state 6
    NOT                shift, and go to state 14
    TRUE               shift, and go to state 15
    FALSE              shift, and go to state 16
    MINUS              shift, and go to state 17
    MINUSMINUS         shift, and go to state 18
    PLUSPLUS           shift, and go to state 19
    START_BRACKET      shift, and go to state 21
    START_PARENTHESIS  shift, and go to state 22
    DOUBLE_COLON       shift, and go to state 24

    expr        go to state 125
    term        go to state 28
    primary     go to state 29
    lvalue      go to state 30
    assignexpr  go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 81

   19 expr: expr DIV . expr

    STRING             shift, and go to state 1
    INTEGER            shift, and go to state 2
    REAL               shift, and go to state 3
    LOCAL              shift, and go to state 4
    NIL                shift, and go to state 5
    ID                 shift, and go to state 6
    NOT                shift, and go to state 14
    TRUE               shift, and go to state 15
    FALSE              shift, and go to state 16
    MINUS              shift, and go to state 17
    MINUSMINUS         shift, and go to state 18
    PLUSPLUS           shift, and go to state 19
    START_BRACKET      shift, and go to state 21
    START_PARENTHESIS  shift, and go to state 22
    DOUBLE_COLON       shift, and go to state 24

    expr        go to state 126
    term        go to state 28
    primary     go to state 29
    lvalue      go to state 30
    assignexpr  go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 82

   16 expr: expr PLUS . expr

    STRING             shift, and go to state 1
    INTEGER            shift, and go to state 2
    REAL               shift, and go to state 3
    LOCAL              shift, and go to state 4
    NIL                shift, and go to state 5
    ID                 shift, and go to state 6
    NOT                shift, and go to state 14
    TRUE               shift, and go to state 15
    FALSE              shift, and go to state 16
    MINUS              shift, and go to state 17
    MINUSMINUS         shift, and go to state 18
    PLUSPLUS           shift, and go to state 19
    START_BRACKET      shift, and go to state 21
    START_PARENTHESIS  shift, and go to state 22
    DOUBLE_COLON       shift, and go to state 24

    expr        go to state 127
    term        go to state 28
    primary     go to state 29
    lvalue      go to state 30
    assignexpr  go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 83

    3 stmt: expr SEMICOLON .

    $default  reduce using rule 3 (stmt)


State 84

   54 member: lvalue START_BRACKET . expr END_BRACKET

    STRING             shift, and go to state 1
    INTEGER            shift, and go to state 2
    REAL               shift, and go to state 3
    LOCAL              shift, and go to state 4
    NIL                shift, and go to state 5
    ID                 shift, and go to state 6
    NOT                shift, and go to state 14
    TRUE               shift, and go to state 15
    FALSE              shift, and go to state 16
    MINUS              shift, and go to state 17
    MINUSMINUS         shift, and go to state 18
    PLUSPLUS           shift, and go to state 19
    START_BRACKET      shift, and go to state 21
    START_PARENTHESIS  shift, and go to state 22
    DOUBLE_COLON       shift, and go to state 24

    expr        go to state 128
    term        go to state 28
    primary     go to state 29
    lvalue      go to state 30
    assignexpr  go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 85

   53 member: lvalue DOT . $@6 ID

    $default  reduce using rule 52 ($@6)

    $@6  go to state 129


State 86

   35 term: lvalue $@3 . PLUSPLUS

    PLUSPLUS  shift, and go to state 130


State 87

   38 term: lvalue $@4 . MINUSMINUS

    MINUSMINUS  shift, and go to state 131


State 88

   50 assignexpr: lvalue $@5 . ASSIGN expr

    ASSIGN  shift, and go to state 132


State 89

   60 call: lvalue $@8 . callsuffix

    START_PARENTHESIS  shift, and go to state 133
    DOUBLE_DOT         shift, and go to state 134

    callsuffix  go to state 135
    normcall    go to state 136
    methodcall  go to state 137


State 90

   51 assignexpr: call ASSIGN . expr

    STRING             shift, and go to state 1
    INTEGER            shift, and go to state 2
    REAL               shift, and go to state 3
    LOCAL              shift, and go to state 4
    NIL                shift, and go to state 5
    ID                 shift, and go to state 6
    NOT                shift, and go to state 14
    TRUE               shift, and go to state 15
    FALSE              shift, and go to state 16
    MINUS              shift, and go to state 17
    MINUSMINUS         shift, and go to state 18
    PLUSPLUS           shift, and go to state 19
    START_BRACKET      shift, and go to state 21
    START_PARENTHESIS  shift, and go to state 22
    DOUBLE_COLON       shift, and go to state 24

    expr        go to state 138
    term        go to state 28
    primary     go to state 29
    lvalue      go to state 30
    assignexpr  go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 91

   57 member: call START_BRACKET . expr END_BRACKET

    STRING             shift, and go to state 1
    INTEGER            shift, and go to state 2
    REAL               shift, and go to state 3
    LOCAL              shift, and go to state 4
    NIL                shift, and go to state 5
    ID                 shift, and go to state 6
    NOT                shift, and go to state 14
    TRUE               shift, and go to state 15
    FALSE              shift, and go to state 16
    MINUS              shift, and go to state 17
    MINUSMINUS         shift, and go to state 18
    PLUSPLUS           shift, and go to state 19
    START_BRACKET      shift, and go to state 21
    START_PARENTHESIS  shift, and go to state 22
    DOUBLE_COLON       shift, and go to state 24

    expr        go to state 139
    term        go to state 28
    primary     go to state 29
    lvalue      go to state 30
    assignexpr  go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 92

   58 call: call START_PARENTHESIS . elist END_PARENTHESIS

    STRING             shift, and go to state 1
    INTEGER            shift, and go to state 2
    REAL               shift, and go to state 3
    LOCAL              shift, and go to state 4
    NIL                shift, and go to state 5
    ID                 shift, and go to state 6
    NOT                shift, and go to state 14
    TRUE               shift, and go to state 15
    FALSE              shift, and go to state 16
    MINUS              shift, and go to state 17
    MINUSMINUS         shift, and go to state 18
    PLUSPLUS           shift, and go to state 19
    START_BRACKET      shift, and go to state 21
    START_PARENTHESIS  shift, and go to state 22
    DOUBLE_COLON       shift, and go to state 24

    $default  reduce using rule 67 (elist)

    expr        go to state 61
    term        go to state 28
    primary     go to state 29
    lvalue      go to state 30
    assignexpr  go to state 31
    member      go to state 32
    call        go to state 33
    elist       go to state 140
    objectdef   go to state 34
    const       go to state 37


State 93

   56 member: call DOT . $@7 ID

    $default  reduce using rule 55 ($@7)

    $@7  go to state 141


State 94

   16 expr: expr . PLUS expr
   17     | expr . MINUS expr
   18     | expr . MULTIPLY expr
   19     | expr . DIV expr
   20     | expr . MOD expr
   21     | expr . BIGGER expr
   22     | expr . BIGGER_EQ expr
   23     | expr . LESS expr
   24     | expr . LESS_EQ expr
   25     | expr . EQUAL expr
   26     | expr . DIFFER expr
   27     | expr . AND expr
   28     | expr . OR expr
  101 ifstmt: IF START_PARENTHESIS expr . END_PARENTHESIS stmt
  102       | IF START_PARENTHESIS expr . END_PARENTHESIS stmt ELSE stmt

    AND              shift, and go to state 70
    OR               shift, and go to state 71
    MINUS            shift, and go to state 72
    EQUAL            shift, and go to state 73
    DIFFER           shift, and go to state 74
    BIGGER           shift, and go to state 75
    LESS             shift, and go to state 76
    BIGGER_EQ        shift, and go to state 77
    LESS_EQ          shift, and go to state 78
    MOD              shift, and go to state 79
    MULTIPLY         shift, and go to state 80
    DIV              shift, and go to state 81
    PLUS             shift, and go to state 82
    END_PARENTHESIS  shift, and go to state 142


State 95

  104 whilestmt: WHILE $@20 START_PARENTHESIS . expr END_PARENTHESIS stmt

    STRING             shift, and go to state 1
    INTEGER            shift, and go to state 2
    REAL               shift, and go to state 3
    LOCAL              shift, and go to state 4
    NIL                shift, and go to state 5
    ID                 shift, and go to state 6
    NOT                shift, and go to state 14
    TRUE               shift, and go to state 15
    FALSE              shift, and go to state 16
    MINUS              shift, and go to state 17
    MINUSMINUS         shift, and go to state 18
    PLUSPLUS           shift, and go to state 19
    START_BRACKET      shift, and go to state 21
    START_PARENTHESIS  shift, and go to state 22
    DOUBLE_COLON       shift, and go to state 24

    expr        go to state 143
    term        go to state 28
    primary     go to state 29
    lvalue      go to state 30
    assignexpr  go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 96

  106 forstmt: FOR $@21 START_PARENTHESIS . elist SEMICOLON expr SEMICOLON elist END_PARENTHESIS stmt

    STRING             shift, and go to state 1
    INTEGER            shift, and go to state 2
    REAL               shift, and go to state 3
    LOCAL              shift, and go to state 4
    NIL                shift, and go to state 5
    ID                 shift, and go to state 6
    NOT                shift, and go to state 14
    TRUE               shift, and go to state 15
    FALSE              shift, and go to state 16
    MINUS              shift, and go to state 17
    MINUSMINUS         shift, and go to state 18
    PLUSPLUS           shift, and go to state 19
    START_BRACKET      shift, and go to state 21
    START_PARENTHESIS  shift, and go to state 22
    DOUBLE_COLON       shift, and go to state 24

    $default  reduce using rule 67 (elist)

    expr        go to state 61
    term        go to state 28
    primary     go to state 29
    lvalue      go to state 30
    assignexpr  go to state 31
    member      go to state 32
    call        go to state 33
    elist       go to state 144
    objectdef   go to state 34
    const       go to state 37


State 97

   83 funcdef: FUNCTION $@11 START_PARENTHESIS . $@12 idlist END_PARENTHESIS $@13 block

    $default  reduce using rule 81 ($@12)

    $@12  go to state 145


State 98

   88 funcdef: FUNCTION $@14 ID . $@15 START_PARENTHESIS $@16 idlist END_PARENTHESIS $@17 block

    $default  reduce using rule 85 ($@15)

    $@15  go to state 146


State 99

   16 expr: expr . PLUS expr
   17     | expr . MINUS expr
   18     | expr . MULTIPLY expr
   19     | expr . DIV expr
   20     | expr . MOD expr
   21     | expr . BIGGER expr
   22     | expr . BIGGER_EQ expr
   23     | expr . LESS expr
   24     | expr . LESS_EQ expr
   25     | expr . EQUAL expr
   26     | expr . DIFFER expr
   27     | expr . AND expr
   28     | expr . OR expr
  108 returnstmt: RETURN $@22 expr . SEMICOLON

    AND        shift, and go to state 70
    OR         shift, and go to state 71
    MINUS      shift, and go to state 72
    EQUAL      shift, and go to state 73
    DIFFER     shift, and go to state 74
    BIGGER     shift, and go to state 75
    LESS       shift, and go to state 76
    BIGGER_EQ  shift, and go to state 77
    LESS_EQ    shift, and go to state 78
    MOD        shift, and go to state 79
    MULTIPLY   shift, and go to state 80
    DIV        shift, and go to state 81
    PLUS       shift, and go to state 82
    SEMICOLON  shift, and go to state 147


State 100

  110 returnstmt: RETURN $@23 SEMICOLON .

    $default  reduce using rule 110 (returnstmt)


State 101

    9 stmt: BREAK $@1 SEMICOLON .

    $default  reduce using rule 9 (stmt)


State 102

   11 stmt: CONTINUE $@2 SEMICOLON .

    $default  reduce using rule 11 (stmt)


State 103

   61 call: START_PARENTHESIS funcdef . END_PARENTHESIS START_PARENTHESIS elist END_PARENTHESIS

    END_PARENTHESIS  shift, and go to state 148


State 104

   77 block: CURLY_START_BRACKET $@9 CURLY_END_BRACKET .

    $default  reduce using rule 77 (block)


State 105

   79 block: CURLY_START_BRACKET $@10 stmt . program CURLY_END_BRACKET

    STRING               shift, and go to state 1
    INTEGER              shift, and go to state 2
    REAL                 shift, and go to state 3
    LOCAL                shift, and go to state 4
    NIL                  shift, and go to state 5
    ID                   shift, and go to state 6
    IF                   shift, and go to state 7
    WHILE                shift, and go to state 8
    FOR                  shift, and go to state 9
    FUNCTION             shift, and go to state 10
    RETURN               shift, and go to state 11
    BREAK                shift, and go to state 12
    CONTINUE             shift, and go to state 13
    NOT                  shift, and go to state 14
    TRUE                 shift, and go to state 15
    FALSE                shift, and go to state 16
    MINUS                shift, and go to state 17
    MINUSMINUS           shift, and go to state 18
    PLUSPLUS             shift, and go to state 19
    CURLY_START_BRACKET  shift, and go to state 20
    START_BRACKET        shift, and go to state 21
    START_PARENTHESIS    shift, and go to state 22
    SEMICOLON            shift, and go to state 23
    DOUBLE_COLON         shift, and go to state 24

    $default  reduce using rule 2 (program)

    program     go to state 149
    stmt        go to state 26
    expr        go to state 27
    term        go to state 28
    primary     go to state 29
    lvalue      go to state 30
    assignexpr  go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    block       go to state 35
    funcdef     go to state 36
    const       go to state 37
    ifstmt      go to state 38
    whilestmt   go to state 39
    forstmt     go to state 40
    returnstmt  go to state 41


State 106

   16 expr: expr . PLUS expr
   17     | expr . MINUS expr
   18     | expr . MULTIPLY expr
   19     | expr . DIV expr
   20     | expr . MOD expr
   21     | expr . BIGGER expr
   22     | expr . BIGGER_EQ expr
   23     | expr . LESS expr
   24     | expr . LESS_EQ expr
   25     | expr . EQUAL expr
   26     | expr . DIFFER expr
   27     | expr . AND expr
   28     | expr . OR expr
   75 indexedelem: CURLY_START_BRACKET expr . COLON expr CURLY_END_BRACKET

    AND        shift, and go to state 70
    OR         shift, and go to state 71
    MINUS      shift, and go to state 72
    EQUAL      shift, and go to state 73
    DIFFER     shift, and go to state 74
    BIGGER     shift, and go to state 75
    LESS       shift, and go to state 76
    BIGGER_EQ  shift, and go to state 77
    LESS_EQ    shift, and go to state 78
    MOD        shift, and go to state 79
    MULTIPLY   shift, and go to state 80
    DIV        shift, and go to state 81
    PLUS       shift, and go to state 82
    COLON      shift, and go to state 150


State 107

   68 commaexpr: COMMA . expr commaexpr

    STRING             shift, and go to state 1
    INTEGER            shift, and go to state 2
    REAL               shift, and go to state 3
    LOCAL              shift, and go to state 4
    NIL                shift, and go to state 5
    ID                 shift, and go to state 6
    NOT                shift, and go to state 14
    TRUE               shift, and go to state 15
    FALSE              shift, and go to state 16
    MINUS              shift, and go to state 17
    MINUSMINUS         shift, and go to state 18
    PLUSPLUS           shift, and go to state 19
    START_BRACKET      shift, and go to state 21
    START_PARENTHESIS  shift, and go to state 22
    DOUBLE_COLON       shift, and go to state 24

    expr        go to state 151
    term        go to state 28
    primary     go to state 29
    lvalue      go to state 30
    assignexpr  go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 108

   66 elist: expr commaexpr .

    $default  reduce using rule 66 (elist)


State 109

   70 objectdef: START_BRACKET elist END_BRACKET .

    $default  reduce using rule 70 (objectdef)


State 110

   71 objectdef: START_BRACKET indexed END_BRACKET .

    $default  reduce using rule 71 (objectdef)


State 111

   73 commaindexedelem: COMMA . indexedelem commaindexedelem

    CURLY_START_BRACKET  shift, and go to state 60

    indexedelem  go to state 152


State 112

   72 indexed: indexedelem commaindexedelem .

    $default  reduce using rule 72 (indexed)


State 113

   30 term: START_PARENTHESIS expr END_PARENTHESIS .

    $default  reduce using rule 30 (term)


State 114

   43 primary: START_PARENTHESIS funcdef END_PARENTHESIS .
   61 call: START_PARENTHESIS funcdef END_PARENTHESIS . START_PARENTHESIS elist END_PARENTHESIS

    START_PARENTHESIS  shift, and go to state 153

    $default  reduce using rule 43 (primary)


State 115

   16 expr: expr . PLUS expr
   17     | expr . MINUS expr
   18     | expr . MULTIPLY expr
   19     | expr . DIV expr
   20     | expr . MOD expr
   21     | expr . BIGGER expr
   22     | expr . BIGGER_EQ expr
   23     | expr . LESS expr
   24     | expr . LESS_EQ expr
   25     | expr . EQUAL expr
   26     | expr . DIFFER expr
   27     | expr . AND expr
   27     | expr AND expr .
   28     | expr . OR expr

    MINUS      shift, and go to state 72
    EQUAL      shift, and go to state 73
    DIFFER     shift, and go to state 74
    BIGGER     shift, and go to state 75
    LESS       shift, and go to state 76
    BIGGER_EQ  shift, and go to state 77
    LESS_EQ    shift, and go to state 78
    MOD        shift, and go to state 79
    MULTIPLY   shift, and go to state 80
    DIV        shift, and go to state 81
    PLUS       shift, and go to state 82

    $default  reduce using rule 27 (expr)


State 116

   16 expr: expr . PLUS expr
   17     | expr . MINUS expr
   18     | expr . MULTIPLY expr
   19     | expr . DIV expr
   20     | expr . MOD expr
   21     | expr . BIGGER expr
   22     | expr . BIGGER_EQ expr
   23     | expr . LESS expr
   24     | expr . LESS_EQ expr
   25     | expr . EQUAL expr
   26     | expr . DIFFER expr
   27     | expr . AND expr
   28     | expr . OR expr
   28     | expr OR expr .

    AND        shift, and go to state 70
    MINUS      shift, and go to state 72
    EQUAL      shift, and go to state 73
    DIFFER     shift, and go to state 74
    BIGGER     shift, and go to state 75
    LESS       shift, and go to state 76
    BIGGER_EQ  shift, and go to state 77
    LESS_EQ    shift, and go to state 78
    MOD        shift, and go to state 79
    MULTIPLY   shift, and go to state 80
    DIV        shift, and go to state 81
    PLUS       shift, and go to state 82

    $default  reduce using rule 28 (expr)


State 117

   16 expr: expr . PLUS expr
   17     | expr . MINUS expr
   17     | expr MINUS expr .
   18     | expr . MULTIPLY expr
   19     | expr . DIV expr
   20     | expr . MOD expr
   21     | expr . BIGGER expr
   22     | expr . BIGGER_EQ expr
   23     | expr . LESS expr
   24     | expr . LESS_EQ expr
   25     | expr . EQUAL expr
   26     | expr . DIFFER expr
   27     | expr . AND expr
   28     | expr . OR expr

    MOD       shift, and go to state 79
    MULTIPLY  shift, and go to state 80
    DIV       shift, and go to state 81

    $default  reduce using rule 17 (expr)


State 118

   16 expr: expr . PLUS expr
   17     | expr . MINUS expr
   18     | expr . MULTIPLY expr
   19     | expr . DIV expr
   20     | expr . MOD expr
   21     | expr . BIGGER expr
   22     | expr . BIGGER_EQ expr
   23     | expr . LESS expr
   24     | expr . LESS_EQ expr
   25     | expr . EQUAL expr
   25     | expr EQUAL expr .
   26     | expr . DIFFER expr
   27     | expr . AND expr
   28     | expr . OR expr

    MINUS      shift, and go to state 72
    BIGGER     shift, and go to state 75
    LESS       shift, and go to state 76
    BIGGER_EQ  shift, and go to state 77
    LESS_EQ    shift, and go to state 78
    MOD        shift, and go to state 79
    MULTIPLY   shift, and go to state 80
    DIV        shift, and go to state 81
    PLUS       shift, and go to state 82

    EQUAL   error (nonassociative)
    DIFFER  error (nonassociative)

    $default  reduce using rule 25 (expr)


State 119

   16 expr: expr . PLUS expr
   17     | expr . MINUS expr
   18     | expr . MULTIPLY expr
   19     | expr . DIV expr
   20     | expr . MOD expr
   21     | expr . BIGGER expr
   22     | expr . BIGGER_EQ expr
   23     | expr . LESS expr
   24     | expr . LESS_EQ expr
   25     | expr . EQUAL expr
   26     | expr . DIFFER expr
   26     | expr DIFFER expr .
   27     | expr . AND expr
   28     | expr . OR expr

    MINUS      shift, and go to state 72
    BIGGER     shift, and go to state 75
    LESS       shift, and go to state 76
    BIGGER_EQ  shift, and go to state 77
    LESS_EQ    shift, and go to state 78
    MOD        shift, and go to state 79
    MULTIPLY   shift, and go to state 80
    DIV        shift, and go to state 81
    PLUS       shift, and go to state 82

    EQUAL   error (nonassociative)
    DIFFER  error (nonassociative)

    $default  reduce using rule 26 (expr)


State 120

   16 expr: expr . PLUS expr
   17     | expr . MINUS expr
   18     | expr . MULTIPLY expr
   19     | expr . DIV expr
   20     | expr . MOD expr
   21     | expr . BIGGER expr
   21     | expr BIGGER expr .
   22     | expr . BIGGER_EQ expr
   23     | expr . LESS expr
   24     | expr . LESS_EQ expr
   25     | expr . EQUAL expr
   26     | expr . DIFFER expr
   27     | expr . AND expr
   28     | expr . OR expr

    MINUS     shift, and go to state 72
    MOD       shift, and go to state 79
    MULTIPLY  shift, and go to state 80
    DIV       shift, and go to state 81
    PLUS      shift, and go to state 82

    BIGGER     error (nonassociative)
    LESS       error (nonassociative)
    BIGGER_EQ  error (nonassociative)
    LESS_EQ    error (nonassociative)

    $default  reduce using rule 21 (expr)


State 121

   16 expr: expr . PLUS expr
   17     | expr . MINUS expr
   18     | expr . MULTIPLY expr
   19     | expr . DIV expr
   20     | expr . MOD expr
   21     | expr . BIGGER expr
   22     | expr . BIGGER_EQ expr
   23     | expr . LESS expr
   23     | expr LESS expr .
   24     | expr . LESS_EQ expr
   25     | expr . EQUAL expr
   26     | expr . DIFFER expr
   27     | expr . AND expr
   28     | expr . OR expr

    MINUS     shift, and go to state 72
    MOD       shift, and go to state 79
    MULTIPLY  shift, and go to state 80
    DIV       shift, and go to state 81
    PLUS      shift, and go to state 82

    BIGGER     error (nonassociative)
    LESS       error (nonassociative)
    BIGGER_EQ  error (nonassociative)
    LESS_EQ    error (nonassociative)

    $default  reduce using rule 23 (expr)


State 122

   16 expr: expr . PLUS expr
   17     | expr . MINUS expr
   18     | expr . MULTIPLY expr
   19     | expr . DIV expr
   20     | expr . MOD expr
   21     | expr . BIGGER expr
   22     | expr . BIGGER_EQ expr
   22     | expr BIGGER_EQ expr .
   23     | expr . LESS expr
   24     | expr . LESS_EQ expr
   25     | expr . EQUAL expr
   26     | expr . DIFFER expr
   27     | expr . AND expr
   28     | expr . OR expr

    MINUS     shift, and go to state 72
    MOD       shift, and go to state 79
    MULTIPLY  shift, and go to state 80
    DIV       shift, and go to state 81
    PLUS      shift, and go to state 82

    BIGGER     error (nonassociative)
    LESS       error (nonassociative)
    BIGGER_EQ  error (nonassociative)
    LESS_EQ    error (nonassociative)

    $default  reduce using rule 22 (expr)


State 123

   16 expr: expr . PLUS expr
   17     | expr . MINUS expr
   18     | expr . MULTIPLY expr
   19     | expr . DIV expr
   20     | expr . MOD expr
   21     | expr . BIGGER expr
   22     | expr . BIGGER_EQ expr
   23     | expr . LESS expr
   24     | expr . LESS_EQ expr
   24     | expr LESS_EQ expr .
   25     | expr . EQUAL expr
   26     | expr . DIFFER expr
   27     | expr . AND expr
   28     | expr . OR expr

    MINUS     shift, and go to state 72
    MOD       shift, and go to state 79
    MULTIPLY  shift, and go to state 80
    DIV       shift, and go to state 81
    PLUS      shift, and go to state 82

    BIGGER     error (nonassociative)
    LESS       error (nonassociative)
    BIGGER_EQ  error (nonassociative)
    LESS_EQ    error (nonassociative)

    $default  reduce using rule 24 (expr)


State 124

   16 expr: expr . PLUS expr
   17     | expr . MINUS expr
   18     | expr . MULTIPLY expr
   19     | expr . DIV expr
   20     | expr . MOD expr
   20     | expr MOD expr .
   21     | expr . BIGGER expr
   22     | expr . BIGGER_EQ expr
   23     | expr . LESS expr
   24     | expr . LESS_EQ expr
   25     | expr . EQUAL expr
   26     | expr . DIFFER expr
   27     | expr . AND expr
   28     | expr . OR expr

    $default  reduce using rule 20 (expr)


State 125

   16 expr: expr . PLUS expr
   17     | expr . MINUS expr
   18     | expr . MULTIPLY expr
   18     | expr MULTIPLY expr .
   19     | expr . DIV expr
   20     | expr . MOD expr
   21     | expr . BIGGER expr
   22     | expr . BIGGER_EQ expr
   23     | expr . LESS expr
   24     | expr . LESS_EQ expr
   25     | expr . EQUAL expr
   26     | expr . DIFFER expr
   27     | expr . AND expr
   28     | expr . OR expr

    $default  reduce using rule 18 (expr)


State 126

   16 expr: expr . PLUS expr
   17     | expr . MINUS expr
   18     | expr . MULTIPLY expr
   19     | expr . DIV expr
   19     | expr DIV expr .
   20     | expr . MOD expr
   21     | expr . BIGGER expr
   22     | expr . BIGGER_EQ expr
   23     | expr . LESS expr
   24     | expr . LESS_EQ expr
   25     | expr . EQUAL expr
   26     | expr . DIFFER expr
   27     | expr . AND expr
   28     | expr . OR expr

    $default  reduce using rule 19 (expr)


State 127

   16 expr: expr . PLUS expr
   16     | expr PLUS expr .
   17     | expr . MINUS expr
   18     | expr . MULTIPLY expr
   19     | expr . DIV expr
   20     | expr . MOD expr
   21     | expr . BIGGER expr
   22     | expr . BIGGER_EQ expr
   23     | expr . LESS expr
   24     | expr . LESS_EQ expr
   25     | expr . EQUAL expr
   26     | expr . DIFFER expr
   27     | expr . AND expr
   28     | expr . OR expr

    MOD       shift, and go to state 79
    MULTIPLY  shift, and go to state 80
    DIV       shift, and go to state 81

    $default  reduce using rule 16 (expr)


State 128

   16 expr: expr . PLUS expr
   17     | expr . MINUS expr
   18     | expr . MULTIPLY expr
   19     | expr . DIV expr
   20     | expr . MOD expr
   21     | expr . BIGGER expr
   22     | expr . BIGGER_EQ expr
   23     | expr . LESS expr
   24     | expr . LESS_EQ expr
   25     | expr . EQUAL expr
   26     | expr . DIFFER expr
   27     | expr . AND expr
   28     | expr . OR expr
   54 member: lvalue START_BRACKET expr . END_BRACKET

    AND          shift, and go to state 70
    OR           shift, and go to state 71
    MINUS        shift, and go to state 72
    EQUAL        shift, and go to state 73
    DIFFER       shift, and go to state 74
    BIGGER       shift, and go to state 75
    LESS         shift, and go to state 76
    BIGGER_EQ    shift, and go to state 77
    LESS_EQ      shift, and go to state 78
    MOD          shift, and go to state 79
    MULTIPLY     shift, and go to state 80
    DIV          shift, and go to state 81
    PLUS         shift, and go to state 82
    END_BRACKET  shift, and go to state 154


State 129

   53 member: lvalue DOT $@6 . ID

    ID  shift, and go to state 155


State 130

   35 term: lvalue $@3 PLUSPLUS .

    $default  reduce using rule 35 (term)


State 131

   38 term: lvalue $@4 MINUSMINUS .

    $default  reduce using rule 38 (term)


State 132

   50 assignexpr: lvalue $@5 ASSIGN . expr

    STRING             shift, and go to state 1
    INTEGER            shift, and go to state 2
    REAL               shift, and go to state 3
    LOCAL              shift, and go to state 4
    NIL                shift, and go to state 5
    ID                 shift, and go to state 6
    NOT                shift, and go to state 14
    TRUE               shift, and go to state 15
    FALSE              shift, and go to state 16
    MINUS              shift, and go to state 17
    MINUSMINUS         shift, and go to state 18
    PLUSPLUS           shift, and go to state 19
    START_BRACKET      shift, and go to state 21
    START_PARENTHESIS  shift, and go to state 22
    DOUBLE_COLON       shift, and go to state 24

    expr        go to state 156
    term        go to state 28
    primary     go to state 29
    lvalue      go to state 30
    assignexpr  go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 133

   64 normcall: START_PARENTHESIS . elist END_PARENTHESIS

    STRING             shift, and go to state 1
    INTEGER            shift, and go to state 2
    REAL               shift, and go to state 3
    LOCAL              shift, and go to state 4
    NIL                shift, and go to state 5
    ID                 shift, and go to state 6
    NOT                shift, and go to state 14
    TRUE               shift, and go to state 15
    FALSE              shift, and go to state 16
    MINUS              shift, and go to state 17
    MINUSMINUS         shift, and go to state 18
    PLUSPLUS           shift, and go to state 19
    START_BRACKET      shift, and go to state 21
    START_PARENTHESIS  shift, and go to state 22
    DOUBLE_COLON       shift, and go to state 24

    $default  reduce using rule 67 (elist)

    expr        go to state 61
    term        go to state 28
    primary     go to state 29
    lvalue      go to state 30
    assignexpr  go to state 31
    member      go to state 32
    call        go to state 33
    elist       go to state 157
    objectdef   go to state 34
    const       go to state 37


State 134

   65 methodcall: DOUBLE_DOT . ID START_PARENTHESIS elist END_PARENTHESIS

    ID  shift, and go to state 158


State 135

   60 call: lvalue $@8 callsuffix .

    $default  reduce using rule 60 (call)


State 136

   62 callsuffix: normcall .

    $default  reduce using rule 62 (callsuffix)


State 137

   63 callsuffix: methodcall .

    $default  reduce using rule 63 (callsuffix)


State 138

   16 expr: expr . PLUS expr
   17     | expr . MINUS expr
   18     | expr . MULTIPLY expr
   19     | expr . DIV expr
   20     | expr . MOD expr
   21     | expr . BIGGER expr
   22     | expr . BIGGER_EQ expr
   23     | expr . LESS expr
   24     | expr . LESS_EQ expr
   25     | expr . EQUAL expr
   26     | expr . DIFFER expr
   27     | expr . AND expr
   28     | expr . OR expr
   51 assignexpr: call ASSIGN expr .

    AND        shift, and go to state 70
    OR         shift, and go to state 71
    MINUS      shift, and go to state 72
    EQUAL      shift, and go to state 73
    DIFFER     shift, and go to state 74
    BIGGER     shift, and go to state 75
    LESS       shift, and go to state 76
    BIGGER_EQ  shift, and go to state 77
    LESS_EQ    shift, and go to state 78
    MOD        shift, and go to state 79
    MULTIPLY   shift, and go to state 80
    DIV        shift, and go to state 81
    PLUS       shift, and go to state 82

    $default  reduce using rule 51 (assignexpr)


State 139

   16 expr: expr . PLUS expr
   17     | expr . MINUS expr
   18     | expr . MULTIPLY expr
   19     | expr . DIV expr
   20     | expr . MOD expr
   21     | expr . BIGGER expr
   22     | expr . BIGGER_EQ expr
   23     | expr . LESS expr
   24     | expr . LESS_EQ expr
   25     | expr . EQUAL expr
   26     | expr . DIFFER expr
   27     | expr . AND expr
   28     | expr . OR expr
   57 member: call START_BRACKET expr . END_BRACKET

    AND          shift, and go to state 70
    OR           shift, and go to state 71
    MINUS        shift, and go to state 72
    EQUAL        shift, and go to state 73
    DIFFER       shift, and go to state 74
    BIGGER       shift, and go to state 75
    LESS         shift, and go to state 76
    BIGGER_EQ    shift, and go to state 77
    LESS_EQ      shift, and go to state 78
    MOD          shift, and go to state 79
    MULTIPLY     shift, and go to state 80
    DIV          shift, and go to state 81
    PLUS         shift, and go to state 82
    END_BRACKET  shift, and go to state 159


State 140

   58 call: call START_PARENTHESIS elist . END_PARENTHESIS

    END_PARENTHESIS  shift, and go to state 160


State 141

   56 member: call DOT $@7 . ID

    ID  shift, and go to state 161


State 142

  101 ifstmt: IF START_PARENTHESIS expr END_PARENTHESIS . stmt
  102       | IF START_PARENTHESIS expr END_PARENTHESIS . stmt ELSE stmt

    STRING               shift, and go to state 1
    INTEGER              shift, and go to state 2
    REAL                 shift, and go to state 3
    LOCAL                shift, and go to state 4
    NIL                  shift, and go to state 5
    ID                   shift, and go to state 6
    IF                   shift, and go to state 7
    WHILE                shift, and go to state 8
    FOR                  shift, and go to state 9
    FUNCTION             shift, and go to state 10
    RETURN               shift, and go to state 11
    BREAK                shift, and go to state 12
    CONTINUE             shift, and go to state 13
    NOT                  shift, and go to state 14
    TRUE                 shift, and go to state 15
    FALSE                shift, and go to state 16
    MINUS                shift, and go to state 17
    MINUSMINUS           shift, and go to state 18
    PLUSPLUS             shift, and go to state 19
    CURLY_START_BRACKET  shift, and go to state 20
    START_BRACKET        shift, and go to state 21
    START_PARENTHESIS    shift, and go to state 22
    SEMICOLON            shift, and go to state 23
    DOUBLE_COLON         shift, and go to state 24

    stmt        go to state 162
    expr        go to state 27
    term        go to state 28
    primary     go to state 29
    lvalue      go to state 30
    assignexpr  go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    block       go to state 35
    funcdef     go to state 36
    const       go to state 37
    ifstmt      go to state 38
    whilestmt   go to state 39
    forstmt     go to state 40
    returnstmt  go to state 41


State 143

   16 expr: expr . PLUS expr
   17     | expr . MINUS expr
   18     | expr . MULTIPLY expr
   19     | expr . DIV expr
   20     | expr . MOD expr
   21     | expr . BIGGER expr
   22     | expr . BIGGER_EQ expr
   23     | expr . LESS expr
   24     | expr . LESS_EQ expr
   25     | expr . EQUAL expr
   26     | expr . DIFFER expr
   27     | expr . AND expr
   28     | expr . OR expr
  104 whilestmt: WHILE $@20 START_PARENTHESIS expr . END_PARENTHESIS stmt

    AND              shift, and go to state 70
    OR               shift, and go to state 71
    MINUS            shift, and go to state 72
    EQUAL            shift, and go to state 73
    DIFFER           shift, and go to state 74
    BIGGER           shift, and go to state 75
    LESS             shift, and go to state 76
    BIGGER_EQ        shift, and go to state 77
    LESS_EQ          shift, and go to state 78
    MOD              shift, and go to state 79
    MULTIPLY         shift, and go to state 80
    DIV              shift, and go to state 81
    PLUS             shift, and go to state 82
    END_PARENTHESIS  shift, and go to state 163


State 144

  106 forstmt: FOR $@21 START_PARENTHESIS elist . SEMICOLON expr SEMICOLON elist END_PARENTHESIS stmt

    SEMICOLON  shift, and go to state 164


State 145

   83 funcdef: FUNCTION $@11 START_PARENTHESIS $@12 . idlist END_PARENTHESIS $@13 block

    ID  shift, and go to state 165

    $default  reduce using rule 97 (idlist)

    idlist  go to state 166


State 146

   88 funcdef: FUNCTION $@14 ID $@15 . START_PARENTHESIS $@16 idlist END_PARENTHESIS $@17 block

    START_PARENTHESIS  shift, and go to state 167


State 147

  108 returnstmt: RETURN $@22 expr SEMICOLON .

    $default  reduce using rule 108 (returnstmt)


State 148

   61 call: START_PARENTHESIS funcdef END_PARENTHESIS . START_PARENTHESIS elist END_PARENTHESIS

    START_PARENTHESIS  shift, and go to state 153


State 149

   79 block: CURLY_START_BRACKET $@10 stmt program . CURLY_END_BRACKET

    CURLY_END_BRACKET  shift, and go to state 168


State 150

   75 indexedelem: CURLY_START_BRACKET expr COLON . expr CURLY_END_BRACKET

    STRING             shift, and go to state 1
    INTEGER            shift, and go to state 2
    REAL               shift, and go to state 3
    LOCAL              shift, and go to state 4
    NIL                shift, and go to state 5
    ID                 shift, and go to state 6
    NOT                shift, and go to state 14
    TRUE               shift, and go to state 15
    FALSE              shift, and go to state 16
    MINUS              shift, and go to state 17
    MINUSMINUS         shift, and go to state 18
    PLUSPLUS           shift, and go to state 19
    START_BRACKET      shift, and go to state 21
    START_PARENTHESIS  shift, and go to state 22
    DOUBLE_COLON       shift, and go to state 24

    expr        go to state 169
    term        go to state 28
    primary     go to state 29
    lvalue      go to state 30
    assignexpr  go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 151

   16 expr: expr . PLUS expr
   17     | expr . MINUS expr
   18     | expr . MULTIPLY expr
   19     | expr . DIV expr
   20     | expr . MOD expr
   21     | expr . BIGGER expr
   22     | expr . BIGGER_EQ expr
   23     | expr . LESS expr
   24     | expr . LESS_EQ expr
   25     | expr . EQUAL expr
   26     | expr . DIFFER expr
   27     | expr . AND expr
   28     | expr . OR expr
   68 commaexpr: COMMA expr . commaexpr

    AND        shift, and go to state 70
    OR         shift, and go to state 71
    MINUS      shift, and go to state 72
    EQUAL      shift, and go to state 73
    DIFFER     shift, and go to state 74
    BIGGER     shift, and go to state 75
    LESS       shift, and go to state 76
    BIGGER_EQ  shift, and go to state 77
    LESS_EQ    shift, and go to state 78
    MOD        shift, and go to state 79
    MULTIPLY   shift, and go to state 80
    DIV        shift, and go to state 81
    PLUS       shift, and go to state 82
    COMMA      shift, and go to state 107

    $default  reduce using rule 69 (commaexpr)

    commaexpr  go to state 170


State 152

   73 commaindexedelem: COMMA indexedelem . commaindexedelem

    COMMA  shift, and go to state 111

    $default  reduce using rule 74 (commaindexedelem)

    commaindexedelem  go to state 171


State 153

   61 call: START_PARENTHESIS funcdef END_PARENTHESIS START_PARENTHESIS . elist END_PARENTHESIS

    STRING             shift, and go to state 1
    INTEGER            shift, and go to state 2
    REAL               shift, and go to state 3
    LOCAL              shift, and go to state 4
    NIL                shift, and go to state 5
    ID                 shift, and go to state 6
    NOT                shift, and go to state 14
    TRUE               shift, and go to state 15
    FALSE              shift, and go to state 16
    MINUS              shift, and go to state 17
    MINUSMINUS         shift, and go to state 18
    PLUSPLUS           shift, and go to state 19
    START_BRACKET      shift, and go to state 21
    START_PARENTHESIS  shift, and go to state 22
    DOUBLE_COLON       shift, and go to state 24

    $default  reduce using rule 67 (elist)

    expr        go to state 61
    term        go to state 28
    primary     go to state 29
    lvalue      go to state 30
    assignexpr  go to state 31
    member      go to state 32
    call        go to state 33
    elist       go to state 172
    objectdef   go to state 34
    const       go to state 37


State 154

   54 member: lvalue START_BRACKET expr END_BRACKET .

    $default  reduce using rule 54 (member)


State 155

   53 member: lvalue DOT $@6 ID .

    $default  reduce using rule 53 (member)


State 156

   16 expr: expr . PLUS expr
   17     | expr . MINUS expr
   18     | expr . MULTIPLY expr
   19     | expr . DIV expr
   20     | expr . MOD expr
   21     | expr . BIGGER expr
   22     | expr . BIGGER_EQ expr
   23     | expr . LESS expr
   24     | expr . LESS_EQ expr
   25     | expr . EQUAL expr
   26     | expr . DIFFER expr
   27     | expr . AND expr
   28     | expr . OR expr
   50 assignexpr: lvalue $@5 ASSIGN expr .

    AND        shift, and go to state 70
    OR         shift, and go to state 71
    MINUS      shift, and go to state 72
    EQUAL      shift, and go to state 73
    DIFFER     shift, and go to state 74
    BIGGER     shift, and go to state 75
    LESS       shift, and go to state 76
    BIGGER_EQ  shift, and go to state 77
    LESS_EQ    shift, and go to state 78
    MOD        shift, and go to state 79
    MULTIPLY   shift, and go to state 80
    DIV        shift, and go to state 81
    PLUS       shift, and go to state 82

    $default  reduce using rule 50 (assignexpr)


State 157

   64 normcall: START_PARENTHESIS elist . END_PARENTHESIS

    END_PARENTHESIS  shift, and go to state 173


State 158

   65 methodcall: DOUBLE_DOT ID . START_PARENTHESIS elist END_PARENTHESIS

    START_PARENTHESIS  shift, and go to state 174


State 159

   57 member: call START_BRACKET expr END_BRACKET .

    $default  reduce using rule 57 (member)


State 160

   58 call: call START_PARENTHESIS elist END_PARENTHESIS .

    $default  reduce using rule 58 (call)


State 161

   56 member: call DOT $@7 ID .

    $default  reduce using rule 56 (member)


State 162

  101 ifstmt: IF START_PARENTHESIS expr END_PARENTHESIS stmt .
  102       | IF START_PARENTHESIS expr END_PARENTHESIS stmt . ELSE stmt

    ELSE  shift, and go to state 175

    ELSE      [reduce using rule 101 (ifstmt)]
    $default  reduce using rule 101 (ifstmt)


State 163

  104 whilestmt: WHILE $@20 START_PARENTHESIS expr END_PARENTHESIS . stmt

    STRING               shift, and go to state 1
    INTEGER              shift, and go to state 2
    REAL                 shift, and go to state 3
    LOCAL                shift, and go to state 4
    NIL                  shift, and go to state 5
    ID                   shift, and go to state 6
    IF                   shift, and go to state 7
    WHILE                shift, and go to state 8
    FOR                  shift, and go to state 9
    FUNCTION             shift, and go to state 10
    RETURN               shift, and go to state 11
    BREAK                shift, and go to state 12
    CONTINUE             shift, and go to state 13
    NOT                  shift, and go to state 14
    TRUE                 shift, and go to state 15
    FALSE                shift, and go to state 16
    MINUS                shift, and go to state 17
    MINUSMINUS           shift, and go to state 18
    PLUSPLUS             shift, and go to state 19
    CURLY_START_BRACKET  shift, and go to state 20
    START_BRACKET        shift, and go to state 21
    START_PARENTHESIS    shift, and go to state 22
    SEMICOLON            shift, and go to state 23
    DOUBLE_COLON         shift, and go to state 24

    stmt        go to state 176
    expr        go to state 27
    term        go to state 28
    primary     go to state 29
    lvalue      go to state 30
    assignexpr  go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    block       go to state 35
    funcdef     go to state 36
    const       go to state 37
    ifstmt      go to state 38
    whilestmt   go to state 39
    forstmt     go to state 40
    returnstmt  go to state 41


State 164

  106 forstmt: FOR $@21 START_PARENTHESIS elist SEMICOLON . expr SEMICOLON elist END_PARENTHESIS stmt

    STRING             shift, and go to state 1
    INTEGER            shift, and go to state 2
    REAL               shift, and go to state 3
    LOCAL              shift, and go to state 4
    NIL                shift, and go to state 5
    ID                 shift, and go to state 6
    NOT                shift, and go to state 14
    TRUE               shift, and go to state 15
    FALSE              shift, and go to state 16
    MINUS              shift, and go to state 17
    MINUSMINUS         shift, and go to state 18
    PLUSPLUS           shift, and go to state 19
    START_BRACKET      shift, and go to state 21
    START_PARENTHESIS  shift, and go to state 22
    DOUBLE_COLON       shift, and go to state 24

    expr        go to state 177
    term        go to state 28
    primary     go to state 29
    lvalue      go to state 30
    assignexpr  go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 165

   96 idlist: ID . $@18 commaid

    $default  reduce using rule 95 ($@18)

    $@18  go to state 178


State 166

   83 funcdef: FUNCTION $@11 START_PARENTHESIS $@12 idlist . END_PARENTHESIS $@13 block

    END_PARENTHESIS  shift, and go to state 179


State 167

   88 funcdef: FUNCTION $@14 ID $@15 START_PARENTHESIS . $@16 idlist END_PARENTHESIS $@17 block

    $default  reduce using rule 86 ($@16)

    $@16  go to state 180


State 168

   79 block: CURLY_START_BRACKET $@10 stmt program CURLY_END_BRACKET .

    $default  reduce using rule 79 (block)


State 169

   16 expr: expr . PLUS expr
   17     | expr . MINUS expr
   18     | expr . MULTIPLY expr
   19     | expr . DIV expr
   20     | expr . MOD expr
   21     | expr . BIGGER expr
   22     | expr . BIGGER_EQ expr
   23     | expr . LESS expr
   24     | expr . LESS_EQ expr
   25     | expr . EQUAL expr
   26     | expr . DIFFER expr
   27     | expr . AND expr
   28     | expr . OR expr
   75 indexedelem: CURLY_START_BRACKET expr COLON expr . CURLY_END_BRACKET

    AND                shift, and go to state 70
    OR                 shift, and go to state 71
    MINUS              shift, and go to state 72
    EQUAL              shift, and go to state 73
    DIFFER             shift, and go to state 74
    BIGGER             shift, and go to state 75
    LESS               shift, and go to state 76
    BIGGER_EQ          shift, and go to state 77
    LESS_EQ            shift, and go to state 78
    MOD                shift, and go to state 79
    MULTIPLY           shift, and go to state 80
    DIV                shift, and go to state 81
    PLUS               shift, and go to state 82
    CURLY_END_BRACKET  shift, and go to state 181


State 170

   68 commaexpr: COMMA expr commaexpr .

    $default  reduce using rule 68 (commaexpr)


State 171

   73 commaindexedelem: COMMA indexedelem commaindexedelem .

    $default  reduce using rule 73 (commaindexedelem)


State 172

   61 call: START_PARENTHESIS funcdef END_PARENTHESIS START_PARENTHESIS elist . END_PARENTHESIS

    END_PARENTHESIS  shift, and go to state 182


State 173

   64 normcall: START_PARENTHESIS elist END_PARENTHESIS .

    $default  reduce using rule 64 (normcall)


State 174

   65 methodcall: DOUBLE_DOT ID START_PARENTHESIS . elist END_PARENTHESIS

    STRING             shift, and go to state 1
    INTEGER            shift, and go to state 2
    REAL               shift, and go to state 3
    LOCAL              shift, and go to state 4
    NIL                shift, and go to state 5
    ID                 shift, and go to state 6
    NOT                shift, and go to state 14
    TRUE               shift, and go to state 15
    FALSE              shift, and go to state 16
    MINUS              shift, and go to state 17
    MINUSMINUS         shift, and go to state 18
    PLUSPLUS           shift, and go to state 19
    START_BRACKET      shift, and go to state 21
    START_PARENTHESIS  shift, and go to state 22
    DOUBLE_COLON       shift, and go to state 24

    $default  reduce using rule 67 (elist)

    expr        go to state 61
    term        go to state 28
    primary     go to state 29
    lvalue      go to state 30
    assignexpr  go to state 31
    member      go to state 32
    call        go to state 33
    elist       go to state 183
    objectdef   go to state 34
    const       go to state 37


State 175

  102 ifstmt: IF START_PARENTHESIS expr END_PARENTHESIS stmt ELSE . stmt

    STRING               shift, and go to state 1
    INTEGER              shift, and go to state 2
    REAL                 shift, and go to state 3
    LOCAL                shift, and go to state 4
    NIL                  shift, and go to state 5
    ID                   shift, and go to state 6
    IF                   shift, and go to state 7
    WHILE                shift, and go to state 8
    FOR                  shift, and go to state 9
    FUNCTION             shift, and go to state 10
    RETURN               shift, and go to state 11
    BREAK                shift, and go to state 12
    CONTINUE             shift, and go to state 13
    NOT                  shift, and go to state 14
    TRUE                 shift, and go to state 15
    FALSE                shift, and go to state 16
    MINUS                shift, and go to state 17
    MINUSMINUS           shift, and go to state 18
    PLUSPLUS             shift, and go to state 19
    CURLY_START_BRACKET  shift, and go to state 20
    START_BRACKET        shift, and go to state 21
    START_PARENTHESIS    shift, and go to state 22
    SEMICOLON            shift, and go to state 23
    DOUBLE_COLON         shift, and go to state 24

    stmt        go to state 184
    expr        go to state 27
    term        go to state 28
    primary     go to state 29
    lvalue      go to state 30
    assignexpr  go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    block       go to state 35
    funcdef     go to state 36
    const       go to state 37
    ifstmt      go to state 38
    whilestmt   go to state 39
    forstmt     go to state 40
    returnstmt  go to state 41


State 176

  104 whilestmt: WHILE $@20 START_PARENTHESIS expr END_PARENTHESIS stmt .

    $default  reduce using rule 104 (whilestmt)


State 177

   16 expr: expr . PLUS expr
   17     | expr . MINUS expr
   18     | expr . MULTIPLY expr
   19     | expr . DIV expr
   20     | expr . MOD expr
   21     | expr . BIGGER expr
   22     | expr . BIGGER_EQ expr
   23     | expr . LESS expr
   24     | expr . LESS_EQ expr
   25     | expr . EQUAL expr
   26     | expr . DIFFER expr
   27     | expr . AND expr
   28     | expr . OR expr
  106 forstmt: FOR $@21 START_PARENTHESIS elist SEMICOLON expr . SEMICOLON elist END_PARENTHESIS stmt

    AND        shift, and go to state 70
    OR         shift, and go to state 71
    MINUS      shift, and go to state 72
    EQUAL      shift, and go to state 73
    DIFFER     shift, and go to state 74
    BIGGER     shift, and go to state 75
    LESS       shift, and go to state 76
    BIGGER_EQ  shift, and go to state 77
    LESS_EQ    shift, and go to state 78
    MOD        shift, and go to state 79
    MULTIPLY   shift, and go to state 80
    DIV        shift, and go to state 81
    PLUS       shift, and go to state 82
    SEMICOLON  shift, and go to state 185


State 178

   96 idlist: ID $@18 . commaid

    COMMA  shift, and go to state 186

    $default  reduce using rule 100 (commaid)

    commaid  go to state 187


State 179

   83 funcdef: FUNCTION $@11 START_PARENTHESIS $@12 idlist END_PARENTHESIS . $@13 block

    $default  reduce using rule 82 ($@13)

    $@13  go to state 188


State 180

   88 funcdef: FUNCTION $@14 ID $@15 START_PARENTHESIS $@16 . idlist END_PARENTHESIS $@17 block

    ID  shift, and go to state 165

    $default  reduce using rule 97 (idlist)

    idlist  go to state 189


State 181

   75 indexedelem: CURLY_START_BRACKET expr COLON expr CURLY_END_BRACKET .

    $default  reduce using rule 75 (indexedelem)


State 182

   61 call: START_PARENTHESIS funcdef END_PARENTHESIS START_PARENTHESIS elist END_PARENTHESIS .

    $default  reduce using rule 61 (call)


State 183

   65 methodcall: DOUBLE_DOT ID START_PARENTHESIS elist . END_PARENTHESIS

    END_PARENTHESIS  shift, and go to state 190


State 184

  102 ifstmt: IF START_PARENTHESIS expr END_PARENTHESIS stmt ELSE stmt .

    $default  reduce using rule 102 (ifstmt)


State 185

  106 forstmt: FOR $@21 START_PARENTHESIS elist SEMICOLON expr SEMICOLON . elist END_PARENTHESIS stmt

    STRING             shift, and go to state 1
    INTEGER            shift, and go to state 2
    REAL               shift, and go to state 3
    LOCAL              shift, and go to state 4
    NIL                shift, and go to state 5
    ID                 shift, and go to state 6
    NOT                shift, and go to state 14
    TRUE               shift, and go to state 15
    FALSE              shift, and go to state 16
    MINUS              shift, and go to state 17
    MINUSMINUS         shift, and go to state 18
    PLUSPLUS           shift, and go to state 19
    START_BRACKET      shift, and go to state 21
    START_PARENTHESIS  shift, and go to state 22
    DOUBLE_COLON       shift, and go to state 24

    $default  reduce using rule 67 (elist)

    expr        go to state 61
    term        go to state 28
    primary     go to state 29
    lvalue      go to state 30
    assignexpr  go to state 31
    member      go to state 32
    call        go to state 33
    elist       go to state 191
    objectdef   go to state 34
    const       go to state 37


State 186

   99 commaid: COMMA . ID $@19 commaid

    ID  shift, and go to state 192


State 187

   96 idlist: ID $@18 commaid .

    $default  reduce using rule 96 (idlist)


State 188

   83 funcdef: FUNCTION $@11 START_PARENTHESIS $@12 idlist END_PARENTHESIS $@13 . block

    CURLY_START_BRACKET  shift, and go to state 20

    block  go to state 193


State 189

   88 funcdef: FUNCTION $@14 ID $@15 START_PARENTHESIS $@16 idlist . END_PARENTHESIS $@17 block

    END_PARENTHESIS  shift, and go to state 194


State 190

   65 methodcall: DOUBLE_DOT ID START_PARENTHESIS elist END_PARENTHESIS .

    $default  reduce using rule 65 (methodcall)


State 191

  106 forstmt: FOR $@21 START_PARENTHESIS elist SEMICOLON expr SEMICOLON elist . END_PARENTHESIS stmt

    END_PARENTHESIS  shift, and go to state 195


State 192

   99 commaid: COMMA ID . $@19 commaid

    $default  reduce using rule 98 ($@19)

    $@19  go to state 196


State 193

   83 funcdef: FUNCTION $@11 START_PARENTHESIS $@12 idlist END_PARENTHESIS $@13 block .

    $default  reduce using rule 83 (funcdef)


State 194

   88 funcdef: FUNCTION $@14 ID $@15 START_PARENTHESIS $@16 idlist END_PARENTHESIS . $@17 block

    $default  reduce using rule 87 ($@17)

    $@17  go to state 197


State 195

  106 forstmt: FOR $@21 START_PARENTHESIS elist SEMICOLON expr SEMICOLON elist END_PARENTHESIS . stmt

    STRING               shift, and go to state 1
    INTEGER              shift, and go to state 2
    REAL                 shift, and go to state 3
    LOCAL                shift, and go to state 4
    NIL                  shift, and go to state 5
    ID                   shift, and go to state 6
    IF                   shift, and go to state 7
    WHILE                shift, and go to state 8
    FOR                  shift, and go to state 9
    FUNCTION             shift, and go to state 10
    RETURN               shift, and go to state 11
    BREAK                shift, and go to state 12
    CONTINUE             shift, and go to state 13
    NOT                  shift, and go to state 14
    TRUE                 shift, and go to state 15
    FALSE                shift, and go to state 16
    MINUS                shift, and go to state 17
    MINUSMINUS           shift, and go to state 18
    PLUSPLUS             shift, and go to state 19
    CURLY_START_BRACKET  shift, and go to state 20
    START_BRACKET        shift, and go to state 21
    START_PARENTHESIS    shift, and go to state 22
    SEMICOLON            shift, and go to state 23
    DOUBLE_COLON         shift, and go to state 24

    stmt        go to state 198
    expr        go to state 27
    term        go to state 28
    primary     go to state 29
    lvalue      go to state 30
    assignexpr  go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    block       go to state 35
    funcdef     go to state 36
    const       go to state 37
    ifstmt      go to state 38
    whilestmt   go to state 39
    forstmt     go to state 40
    returnstmt  go to state 41


State 196

   99 commaid: COMMA ID $@19 . commaid

    COMMA  shift, and go to state 186

    $default  reduce using rule 100 (commaid)

    commaid  go to state 199


State 197

   88 funcdef: FUNCTION $@14 ID $@15 START_PARENTHESIS $@16 idlist END_PARENTHESIS $@17 . block

    CURLY_START_BRACKET  shift, and go to state 20

    block  go to state 200


State 198

  106 forstmt: FOR $@21 START_PARENTHESIS elist SEMICOLON expr SEMICOLON elist END_PARENTHESIS stmt .

    $default  reduce using rule 106 (forstmt)


State 199

   99 commaid: COMMA ID $@19 commaid .

    $default  reduce using rule 99 (commaid)


State 200

   88 funcdef: FUNCTION $@14 ID $@15 START_PARENTHESIS $@16 idlist END_PARENTHESIS $@17 block .

    $default  reduce using rule 88 (funcdef)
